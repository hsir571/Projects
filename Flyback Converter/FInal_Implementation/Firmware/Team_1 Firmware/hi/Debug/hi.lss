
hi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000b28  00000bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800102  00800102  00000bbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba6  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000872  00000000  00000000  000018b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000751  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  0000287c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000520  00000000  00000000  00002b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b8  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000034e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_20>
  54:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 33 03 	call	0x666	; 0x666 <main>
  9e:	0c 94 92 05 	jmp	0xb24	; 0xb24 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include "adc.h"


//Initialize ADC to auto trigger with timer0 compare match

void adc_init(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 1 << REFS0;																//AVCC set as reference, ADC0 selected and results are right adjusted
  ae:	8c e7       	ldi	r24, 0x7C	; 124
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	20 e4       	ldi	r18, 0x40	; 64
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADATE) |(1 << ADIE) | (0b110 << ADPS0); //Enable ADC, start conversion, setup auto-trigger, enable interrupt and set pre-scaler to 64 for ADC clock of 250kHz
  b8:	8a e7       	ldi	r24, 0x7A	; 122
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2e ee       	ldi	r18, 0xEE	; 238
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	ADCSRB = (0b110 << ADTS0);															//Use TC1 overflow (every 0.1ms) as auto- trigger source 
  c2:	8b e7       	ldi	r24, 0x7B	; 123
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	26 e0       	ldi	r18, 0x06	; 6
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
	DIDR0 = 1 << ADC0D;																	//ADC0 buffer disabled
  cc:	8e e7       	ldi	r24, 0x7E	; 126
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
}
  d6:	00 00       	nop
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <sat_limit_pi>:
int16_t V_err;			//ranges from -3500 to 3500




int16_t sat_limit_pi(int16_t result){
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	00 d0       	rcall	.+0      	; 0xe4 <sat_limit_pi+0x6>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	9a 83       	std	Y+2, r25	; 0x02
  ea:	89 83       	std	Y+1, r24	; 0x01
	if (result > PI_LIMIT){
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	9a 81       	ldd	r25, Y+2	; 0x02
  f0:	81 38       	cpi	r24, 0x81	; 129
  f2:	9a 41       	sbci	r25, 0x1A	; 26
  f4:	1c f0       	brlt	.+6      	; 0xfc <sat_limit_pi+0x1e>
		return PI_LIMIT;                //If result greater than upper limit return upper limit
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	9a e1       	ldi	r25, 0x1A	; 26
  fa:	0a c0       	rjmp	.+20     	; 0x110 <sat_limit_pi+0x32>
	}
	else if (result < -PI_LIMIT){
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	80 38       	cpi	r24, 0x80	; 128
 102:	95 4e       	sbci	r25, 0xE5	; 229
 104:	1c f4       	brge	.+6      	; 0x10c <sat_limit_pi+0x2e>
		return -PI_LIMIT;                //If result smaller than lower limit return upper limit
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	95 ee       	ldi	r25, 0xE5	; 229
 10a:	02 c0       	rjmp	.+4      	; 0x110 <sat_limit_pi+0x32>
	}
	else
	return result;
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	9a 81       	ldd	r25, Y+2	; 0x02
}
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <pi_controller>:



void pi_controller(uint16_t V_out, uint16_t V_ref){
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	00 d0       	rcall	.+0      	; 0x120 <pi_controller+0x6>
 120:	00 d0       	rcall	.+0      	; 0x122 <pi_controller+0x8>
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01
 12a:	7c 83       	std	Y+4, r23	; 0x04
 12c:	6b 83       	std	Y+3, r22	; 0x03
	
	V_err =  ( V_ref - V_out );				//Calculating the error voltage, missing inverse for proteus testing
 12e:	2b 81       	ldd	r18, Y+3	; 0x03
 130:	3c 81       	ldd	r19, Y+4	; 0x04
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	a9 01       	movw	r20, r18
 138:	48 1b       	sub	r20, r24
 13a:	59 0b       	sbc	r21, r25
 13c:	ca 01       	movw	r24, r20
 13e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <V_err+0x1>
 142:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <V_err>
	
											//rate limiter
	if(V_err > 642){						//value calculated so bit shift of V_err doesn't overflow
 146:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <V_err>
 14a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <V_err+0x1>
 14e:	83 38       	cpi	r24, 0x83	; 131
 150:	92 40       	sbci	r25, 0x02	; 2
 152:	3c f0       	brlt	.+14     	; 0x162 <pi_controller+0x48>
		V_err = 642;
 154:	82 e8       	ldi	r24, 0x82	; 130
 156:	92 e0       	ldi	r25, 0x02	; 2
 158:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <V_err+0x1>
 15c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <V_err>
 160:	0d c0       	rjmp	.+26     	; 0x17c <pi_controller+0x62>
	}else if(V_err < -642){
 162:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <V_err>
 166:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <V_err+0x1>
 16a:	8e 37       	cpi	r24, 0x7E	; 126
 16c:	9d 4f       	sbci	r25, 0xFD	; 253
 16e:	34 f4       	brge	.+12     	; 0x17c <pi_controller+0x62>
		V_err = -642;
 170:	8e e7       	ldi	r24, 0x7E	; 126
 172:	9d ef       	ldi	r25, 0xFD	; 253
 174:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <V_err+0x1>
 178:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <V_err>
	}
	
	Prop_out = V_err * VOLTAGE_KP;								//Calculating the proportional term													
 17c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <V_err>
 180:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <V_err+0x1>
 184:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <Prop_out+0x1>
 188:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Prop_out>
									
	Int_out = sat_limit_pi(Int_out + ((V_err*51)>>9));			//Calculating the integral term and limiting to within +/-PI_LIMIT
 18c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <V_err>
 190:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <V_err+0x1>
 194:	43 e3       	ldi	r20, 0x33	; 51
 196:	42 9f       	mul	r20, r18
 198:	c0 01       	movw	r24, r0
 19a:	43 9f       	mul	r20, r19
 19c:	90 0d       	add	r25, r0
 19e:	11 24       	eor	r1, r1
 1a0:	9c 01       	movw	r18, r24
 1a2:	23 2f       	mov	r18, r19
 1a4:	33 0f       	add	r19, r19
 1a6:	33 0b       	sbc	r19, r19
 1a8:	25 95       	asr	r18
 1aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1ae:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1b2:	82 0f       	add	r24, r18
 1b4:	93 1f       	adc	r25, r19
 1b6:	0e 94 6f 00 	call	0xde	; 0xde <sat_limit_pi>
 1ba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
																//bit shift corresponds to *0.1 derived from KI*T_SAMPLE
	PI_out = sat_limit_pi(Prop_out + Int_out);                  //Calculating the PI_out and limiting to within +/-PI_LIMIT 
 1c2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <Prop_out>
 1c6:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <Prop_out+0x1>
 1ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1d2:	82 0f       	add	r24, r18
 1d4:	93 1f       	adc	r25, r19
 1d6:	0e 94 6f 00 	call	0xde	; 0xde <sat_limit_pi>
 1da:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PI_out+0x1>
 1de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PI_out>
	
	set_timer0_compare(PI_out);									//mapping the PI_out and setting OCR0B to this value
 1e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PI_out>
 1e6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <PI_out+0x1>
 1ea:	0e 94 cc 03 	call	0x798	; 0x798 <set_timer0_compare>
	
}
 1ee:	00 00       	nop
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <__vector_21>:





ISR (ADC_vect){
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
	ADC_reading = ADC;					//reads ADC
 21e:	88 e7       	ldi	r24, 0x78	; 120
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	80 81       	ld	r24, Z
 226:	91 81       	ldd	r25, Z+1	; 0x01
 228:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ADC_reading+0x1>
 22c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ADC_reading>
	TIFR1 |= 1 << TOV1;					//reset timer1 overflow
 230:	86 e3       	ldi	r24, 0x36	; 54
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	26 e3       	ldi	r18, 0x36	; 54
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	f9 01       	movw	r30, r18
 23a:	20 81       	ld	r18, Z
 23c:	21 60       	ori	r18, 0x01	; 1
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18

}	
 242:	00 00       	nop
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <__vector_18>:


ISR(USART_RX_vect) {
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
	rx_buffer[rx_byte_pos] = UDR0;        //Store received character to next position of array
 280:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rx_byte_pos>
 284:	88 2f       	mov	r24, r24
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	26 ec       	ldi	r18, 0xC6	; 198
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	f9 01       	movw	r30, r18
 28e:	20 81       	ld	r18, Z
 290:	86 5e       	subi	r24, 0xE6	; 230
 292:	9e 4f       	sbci	r25, 0xFE	; 254
 294:	fc 01       	movw	r30, r24
 296:	20 83       	st	Z, r18
	rx_byte_pos++;                        //Increment buffer position
 298:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rx_byte_pos>
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <rx_byte_pos>
	rx_complete_flag = 0;                 //Indicate message not ready to read
 2a2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rx_complete_flag>
	
	if(rx_buffer[rx_byte_pos-1] == '\r'){	//Check if a carriage return entered indicating end of message
 2a6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rx_byte_pos>
 2aa:	88 2f       	mov	r24, r24
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	86 5e       	subi	r24, 0xE6	; 230
 2b2:	9e 4f       	sbci	r25, 0xFE	; 254
 2b4:	fc 01       	movw	r30, r24
 2b6:	80 81       	ld	r24, Z
 2b8:	8d 30       	cpi	r24, 0x0D	; 13
 2ba:	31 f4       	brne	.+12     	; 0x2c8 <__vector_18+0x68>
		rx_complete_flag = 1;               //Indicate message ready to read
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rx_complete_flag>
		rx_byte_pos = 0;                    //Reset position in array
 2c2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <rx_byte_pos>
	}
	else if(rx_byte_pos > (BUFFER_SIZE - 1)){
		rx_byte_pos = 0;                    //If buffer full discard message and reset buffer
	}
	
}
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <__vector_18+0x74>
	
	if(rx_buffer[rx_byte_pos-1] == '\r'){	//Check if a carriage return entered indicating end of message
		rx_complete_flag = 1;               //Indicate message ready to read
		rx_byte_pos = 0;                    //Reset position in array
	}
	else if(rx_byte_pos > (BUFFER_SIZE - 1)){
 2c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rx_byte_pos>
 2cc:	88 30       	cpi	r24, 0x08	; 8
 2ce:	10 f0       	brcs	.+4      	; 0x2d4 <__vector_18+0x74>
		rx_byte_pos = 0;                    //If buffer full discard message and reset buffer
 2d0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <rx_byte_pos>
	}
	
}
 2d4:	00 00       	nop
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <__vector_20>:



ISR(USART_TX_vect) {
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
	UDR0 = tx_buffer[tx_byte_pos];
 312:	86 ec       	ldi	r24, 0xC6	; 198
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <tx_byte_pos>
 31a:	22 2f       	mov	r18, r18
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	2e 5d       	subi	r18, 0xDE	; 222
 320:	3e 4f       	sbci	r19, 0xFE	; 254
 322:	f9 01       	movw	r30, r18
 324:	20 81       	ld	r18, Z
 326:	fc 01       	movw	r30, r24
 328:	20 83       	st	Z, r18
	tx_buffer[tx_byte_pos] = '\0';	//once value is transmitted clear it so the transmit doesn't repeatable send the same value
 32a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tx_byte_pos>
 32e:	88 2f       	mov	r24, r24
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	8e 5d       	subi	r24, 0xDE	; 222
 334:	9e 4f       	sbci	r25, 0xFE	; 254
 336:	fc 01       	movw	r30, r24
 338:	10 82       	st	Z, r1
	tx_byte_pos++;
 33a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tx_byte_pos>
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tx_byte_pos>
	tx_complete_flag = 0;
 344:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tx_complete_flag>
	
	if(UDR0 == '\r') {
 348:	86 ec       	ldi	r24, 0xC6	; 198
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	fc 01       	movw	r30, r24
 34e:	80 81       	ld	r24, Z
 350:	8d 30       	cpi	r24, 0x0D	; 13
 352:	31 f4       	brne	.+12     	; 0x360 <__vector_20+0x6e>
		tx_complete_flag = 1;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <tx_complete_flag>
		tx_byte_pos = 0;
 35a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tx_byte_pos>
	}
	else if (tx_byte_pos > (BUFFER_SIZE-1)) {
		tx_byte_pos = 0; 
	}
	
}
 35e:	06 c0       	rjmp	.+12     	; 0x36c <__vector_20+0x7a>
	
	if(UDR0 == '\r') {
		tx_complete_flag = 1;
		tx_byte_pos = 0;
	}
	else if (tx_byte_pos > (BUFFER_SIZE-1)) {
 360:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tx_byte_pos>
 364:	88 30       	cpi	r24, 0x08	; 8
 366:	10 f0       	brcs	.+4      	; 0x36c <__vector_20+0x7a>
		tx_byte_pos = 0; 
 368:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tx_byte_pos>
	}
	
}
 36c:	00 00       	nop
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <load_voltage>:





void load_voltage(uint16_t output) {
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	00 d0       	rcall	.+0      	; 0x394 <load_voltage+0xa>
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	9a 83       	std	Y+2, r25	; 0x02
 39a:	89 83       	std	Y+1, r24	; 0x01
			
														
		v1 = output/1000;								
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	9a 81       	ldd	r25, Y+2	; 0x02
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	9c 01       	movw	r18, r24
 3ae:	a5 ec       	ldi	r26, 0xC5	; 197
 3b0:	b0 e2       	ldi	r27, 0x20	; 32
 3b2:	0e 94 61 05 	call	0xac2	; 0xac2 <__umulhisi3>
 3b6:	92 95       	swap	r25
 3b8:	82 95       	swap	r24
 3ba:	8f 70       	andi	r24, 0x0F	; 15
 3bc:	89 27       	eor	r24, r25
 3be:	9f 70       	andi	r25, 0x0F	; 15
 3c0:	89 27       	eor	r24, r25
 3c2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <v1>
		v2 = (output - (v1*1000))/100; 
 3c6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <v1>
 3ca:	28 2f       	mov	r18, r24
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	88 e1       	ldi	r24, 0x18	; 24
 3d0:	9c ef       	ldi	r25, 0xFC	; 252
 3d2:	28 9f       	mul	r18, r24
 3d4:	a0 01       	movw	r20, r0
 3d6:	29 9f       	mul	r18, r25
 3d8:	50 0d       	add	r21, r0
 3da:	38 9f       	mul	r19, r24
 3dc:	50 0d       	add	r21, r0
 3de:	11 24       	eor	r1, r1
 3e0:	9a 01       	movw	r18, r20
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	9a 81       	ldd	r25, Y+2	; 0x02
 3e6:	82 0f       	add	r24, r18
 3e8:	93 1f       	adc	r25, r19
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
 3f2:	9c 01       	movw	r18, r24
 3f4:	ab e7       	ldi	r26, 0x7B	; 123
 3f6:	b4 e1       	ldi	r27, 0x14	; 20
 3f8:	0e 94 61 05 	call	0xac2	; 0xac2 <__umulhisi3>
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <v2>
		v3 = (output - (v1*1000) - (v2*100))/10;	
 404:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <v1>
 408:	28 2f       	mov	r18, r24
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	88 e1       	ldi	r24, 0x18	; 24
 40e:	9c ef       	ldi	r25, 0xFC	; 252
 410:	28 9f       	mul	r18, r24
 412:	a0 01       	movw	r20, r0
 414:	29 9f       	mul	r18, r25
 416:	50 0d       	add	r21, r0
 418:	38 9f       	mul	r19, r24
 41a:	50 0d       	add	r21, r0
 41c:	11 24       	eor	r1, r1
 41e:	9a 01       	movw	r18, r20
 420:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <v2>
 424:	88 2f       	mov	r24, r24
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	6c e9       	ldi	r22, 0x9C	; 156
 42a:	8c 01       	movw	r16, r24
 42c:	60 03       	mulsu	r22, r16
 42e:	a0 01       	movw	r20, r0
 430:	61 9f       	mul	r22, r17
 432:	50 0d       	add	r21, r0
 434:	11 24       	eor	r1, r1
 436:	ca 01       	movw	r24, r20
 438:	28 0f       	add	r18, r24
 43a:	39 1f       	adc	r19, r25
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	9a 81       	ldd	r25, Y+2	; 0x02
 440:	82 0f       	add	r24, r18
 442:	93 1f       	adc	r25, r19
 444:	9c 01       	movw	r18, r24
 446:	ad ec       	ldi	r26, 0xCD	; 205
 448:	bc ec       	ldi	r27, 0xCC	; 204
 44a:	0e 94 61 05 	call	0xac2	; 0xac2 <__umulhisi3>
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	96 95       	lsr	r25
 454:	87 95       	ror	r24
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <v3>
		v4 = output - (v1*1000) - (v2*100) - (v3*10);
 45e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <v1>
 462:	88 e1       	ldi	r24, 0x18	; 24
 464:	98 9f       	mul	r25, r24
 466:	90 2d       	mov	r25, r0
 468:	11 24       	eor	r1, r1
 46a:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <v2>
 46e:	8c e9       	ldi	r24, 0x9C	; 156
 470:	28 9f       	mul	r18, r24
 472:	80 2d       	mov	r24, r0
 474:	11 24       	eor	r1, r1
 476:	98 0f       	add	r25, r24
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	98 0f       	add	r25, r24
 47c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <v3>
 480:	88 0f       	add	r24, r24
 482:	28 2f       	mov	r18, r24
 484:	22 0f       	add	r18, r18
 486:	22 0f       	add	r18, r18
 488:	82 0f       	add	r24, r18
 48a:	81 95       	neg	r24
 48c:	89 0f       	add	r24, r25
 48e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <v4>



		tx_byte_pos = 0;		//force the byte_pos to 0 so the transmit properly sends in the right order
 492:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tx_byte_pos>
		tx_buffer[0] = v1 + 48; //plus 48 for ascii
 496:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <v1>
 49a:	80 5d       	subi	r24, 0xD0	; 208
 49c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tx_buffer>
		tx_buffer[1] = v2 + 48;
 4a0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <v2>
 4a4:	80 5d       	subi	r24, 0xD0	; 208
 4a6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <tx_buffer+0x1>
		tx_buffer[2] = v3 + 48;
 4aa:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <v3>
 4ae:	80 5d       	subi	r24, 0xD0	; 208
 4b0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <tx_buffer+0x2>
		tx_buffer[3] = v4 + 48;
 4b4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <v4>
 4b8:	80 5d       	subi	r24, 0xD0	; 208
 4ba:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <tx_buffer+0x3>
		tx_buffer[4] = 48;		//to make output in mV
 4be:	80 e3       	ldi	r24, 0x30	; 48
 4c0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <tx_buffer+0x4>
		tx_buffer[5] = '\n';
 4c4:	8a e0       	ldi	r24, 0x0A	; 10
 4c6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <tx_buffer+0x5>
		tx_buffer[6] = '\r';
 4ca:	8d e0       	ldi	r24, 0x0D	; 13
 4cc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <tx_buffer+0x6>
	
}
 4d0:	00 00       	nop
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	08 95       	ret

000004e0 <receive>:




uint16_t receive (uint16_t safety){
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
 4e8:	27 97       	sbiw	r28, 0x07	; 7
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	f8 94       	cli
 4ee:	de bf       	out	0x3e, r29	; 62
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	cd bf       	out	0x3d, r28	; 61
 4f4:	9f 83       	std	Y+7, r25	; 0x07
 4f6:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t i = 0;
 4f8:	19 82       	std	Y+1, r1	; 0x01
	uint8_t value_buffer[4] = {0,0,0,0};	 //stores user inputted voltage temporarily in an array
 4fa:	1a 82       	std	Y+2, r1	; 0x02
 4fc:	1b 82       	std	Y+3, r1	; 0x03
 4fe:	1c 82       	std	Y+4, r1	; 0x04
 500:	1d 82       	std	Y+5, r1	; 0x05

	
	while (rx_buffer[i] != '\r'){
 502:	2e c0       	rjmp	.+92     	; 0x560 <receive+0x80>
		
		if(rx_buffer[i] < 48){	//48 to 57 are the values for 0-9 in ASCII, if user input a non number then just return the old v_ref
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	88 2f       	mov	r24, r24
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	86 5e       	subi	r24, 0xE6	; 230
 50c:	9e 4f       	sbci	r25, 0xFE	; 254
 50e:	fc 01       	movw	r30, r24
 510:	80 81       	ld	r24, Z
 512:	80 33       	cpi	r24, 0x30	; 48
 514:	18 f4       	brcc	.+6      	; 0x51c <receive+0x3c>
			return safety;
 516:	8e 81       	ldd	r24, Y+6	; 0x06
 518:	9f 81       	ldd	r25, Y+7	; 0x07
 51a:	9c c0       	rjmp	.+312    	; 0x654 <receive+0x174>
		}else if (rx_buffer[i] > 57){
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	86 5e       	subi	r24, 0xE6	; 230
 524:	9e 4f       	sbci	r25, 0xFE	; 254
 526:	fc 01       	movw	r30, r24
 528:	80 81       	ld	r24, Z
 52a:	8a 33       	cpi	r24, 0x3A	; 58
 52c:	18 f0       	brcs	.+6      	; 0x534 <receive+0x54>
			return safety;
 52e:	8e 81       	ldd	r24, Y+6	; 0x06
 530:	9f 81       	ldd	r25, Y+7	; 0x07
 532:	90 c0       	rjmp	.+288    	; 0x654 <receive+0x174>
		}
		
		value_buffer[i] = rx_buffer[i] - 48;	//subtract 48 to extract number from ASCII
 534:	89 81       	ldd	r24, Y+1	; 0x01
 536:	88 2f       	mov	r24, r24
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	29 81       	ldd	r18, Y+1	; 0x01
 53c:	22 2f       	mov	r18, r18
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	26 5e       	subi	r18, 0xE6	; 230
 542:	3e 4f       	sbci	r19, 0xFE	; 254
 544:	f9 01       	movw	r30, r18
 546:	20 81       	ld	r18, Z
 548:	40 ed       	ldi	r20, 0xD0	; 208
 54a:	42 0f       	add	r20, r18
 54c:	9e 01       	movw	r18, r28
 54e:	2e 5f       	subi	r18, 0xFE	; 254
 550:	3f 4f       	sbci	r19, 0xFF	; 255
 552:	82 0f       	add	r24, r18
 554:	93 1f       	adc	r25, r19
 556:	fc 01       	movw	r30, r24
 558:	40 83       	st	Z, r20
		i++;
 55a:	89 81       	ldd	r24, Y+1	; 0x01
 55c:	8f 5f       	subi	r24, 0xFF	; 255
 55e:	89 83       	std	Y+1, r24	; 0x01
uint16_t receive (uint16_t safety){
	uint8_t i = 0;
	uint8_t value_buffer[4] = {0,0,0,0};	 //stores user inputted voltage temporarily in an array

	
	while (rx_buffer[i] != '\r'){
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	88 2f       	mov	r24, r24
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	86 5e       	subi	r24, 0xE6	; 230
 568:	9e 4f       	sbci	r25, 0xFE	; 254
 56a:	fc 01       	movw	r30, r24
 56c:	80 81       	ld	r24, Z
 56e:	8d 30       	cpi	r24, 0x0D	; 13
 570:	49 f6       	brne	.-110    	; 0x504 <receive+0x24>
		i++;
		
	}
	
	
	if(i == 5){			//if the value more than 10V convert accordingly
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	85 30       	cpi	r24, 0x05	; 5
 576:	79 f5       	brne	.+94     	; 0x5d6 <receive+0xf6>
		received_voltage = 1000*value_buffer[0] + 100*value_buffer[1] + 10*value_buffer[2] + value_buffer[3];
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	48 2f       	mov	r20, r24
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	88 ee       	ldi	r24, 0xE8	; 232
 580:	93 e0       	ldi	r25, 0x03	; 3
 582:	48 9f       	mul	r20, r24
 584:	90 01       	movw	r18, r0
 586:	49 9f       	mul	r20, r25
 588:	30 0d       	add	r19, r0
 58a:	58 9f       	mul	r21, r24
 58c:	30 0d       	add	r19, r0
 58e:	11 24       	eor	r1, r1
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	48 2f       	mov	r20, r24
 594:	50 e0       	ldi	r21, 0x00	; 0
 596:	64 e6       	ldi	r22, 0x64	; 100
 598:	64 9f       	mul	r22, r20
 59a:	c0 01       	movw	r24, r0
 59c:	65 9f       	mul	r22, r21
 59e:	90 0d       	add	r25, r0
 5a0:	11 24       	eor	r1, r1
 5a2:	28 0f       	add	r18, r24
 5a4:	39 1f       	adc	r19, r25
 5a6:	8c 81       	ldd	r24, Y+4	; 0x04
 5a8:	88 2f       	mov	r24, r24
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	ac 01       	movw	r20, r24
 5b2:	44 0f       	add	r20, r20
 5b4:	55 1f       	adc	r21, r21
 5b6:	44 0f       	add	r20, r20
 5b8:	55 1f       	adc	r21, r21
 5ba:	84 0f       	add	r24, r20
 5bc:	95 1f       	adc	r25, r21
 5be:	28 0f       	add	r18, r24
 5c0:	39 1f       	adc	r19, r25
 5c2:	8d 81       	ldd	r24, Y+5	; 0x05
 5c4:	88 2f       	mov	r24, r24
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	82 0f       	add	r24, r18
 5ca:	93 1f       	adc	r25, r19
 5cc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <received_voltage+0x1>
 5d0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <received_voltage>
 5d4:	27 c0       	rjmp	.+78     	; 0x624 <receive+0x144>
		
	}else if(i == 4){	//if the value is from 1-10V do this conversion instead
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	84 30       	cpi	r24, 0x04	; 4
 5da:	09 f5       	brne	.+66     	; 0x61e <receive+0x13e>
		received_voltage = 100*value_buffer[0] + 10*value_buffer[1] + value_buffer[2];
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	88 2f       	mov	r24, r24
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	44 e6       	ldi	r20, 0x64	; 100
 5e4:	48 9f       	mul	r20, r24
 5e6:	90 01       	movw	r18, r0
 5e8:	49 9f       	mul	r20, r25
 5ea:	30 0d       	add	r19, r0
 5ec:	11 24       	eor	r1, r1
 5ee:	8b 81       	ldd	r24, Y+3	; 0x03
 5f0:	88 2f       	mov	r24, r24
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	ac 01       	movw	r20, r24
 5fa:	44 0f       	add	r20, r20
 5fc:	55 1f       	adc	r21, r21
 5fe:	44 0f       	add	r20, r20
 600:	55 1f       	adc	r21, r21
 602:	84 0f       	add	r24, r20
 604:	95 1f       	adc	r25, r21
 606:	28 0f       	add	r18, r24
 608:	39 1f       	adc	r19, r25
 60a:	8c 81       	ldd	r24, Y+4	; 0x04
 60c:	88 2f       	mov	r24, r24
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	82 0f       	add	r24, r18
 612:	93 1f       	adc	r25, r19
 614:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <received_voltage+0x1>
 618:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <received_voltage>
 61c:	03 c0       	rjmp	.+6      	; 0x624 <receive+0x144>
		
	}else{				//if value is less than 1V escape
		return safety; 	
 61e:	8e 81       	ldd	r24, Y+6	; 0x06
 620:	9f 81       	ldd	r25, Y+7	; 0x07
 622:	18 c0       	rjmp	.+48     	; 0x654 <receive+0x174>
	}
	

	
	if(received_voltage < 500){				//if the found value is less than 5V then return the old v_ref as it is not an appropriate voltage reference
 624:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <received_voltage>
 628:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <received_voltage+0x1>
 62c:	84 3f       	cpi	r24, 0xF4	; 244
 62e:	91 40       	sbci	r25, 0x01	; 1
 630:	18 f4       	brcc	.+6      	; 0x638 <receive+0x158>
		return safety;
 632:	8e 81       	ldd	r24, Y+6	; 0x06
 634:	9f 81       	ldd	r25, Y+7	; 0x07
 636:	0e c0       	rjmp	.+28     	; 0x654 <receive+0x174>
		
	}else if (received_voltage > 3000){		//same for if the value is above 30V
 638:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <received_voltage>
 63c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <received_voltage+0x1>
 640:	89 3b       	cpi	r24, 0xB9	; 185
 642:	9b 40       	sbci	r25, 0x0B	; 11
 644:	18 f0       	brcs	.+6      	; 0x64c <receive+0x16c>
		return safety;
 646:	8e 81       	ldd	r24, Y+6	; 0x06
 648:	9f 81       	ldd	r25, Y+7	; 0x07
 64a:	04 c0       	rjmp	.+8      	; 0x654 <receive+0x174>
		
	}
	
	return received_voltage;				
 64c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <received_voltage>
 650:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <received_voltage+0x1>
	
}
 654:	27 96       	adiw	r28, 0x07	; 7
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	08 95       	ret

00000666 <main>:





int main(void) {
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	cd b7       	in	r28, 0x3d	; 61
 66c:	de b7       	in	r29, 0x3e	; 62

	timer0_init();				//Initializing timer0
 66e:	0e 94 97 03 	call	0x72e	; 0x72e <timer0_init>
	timer1_init();				//Initializing timer1
 672:	0e 94 b3 03 	call	0x766	; 0x766 <timer1_init>
	adc_init();					//Initializing ADC with interrupts
 676:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	uart_init(9600);			//Initializing UART0 with interrupts
 67a:	80 e8       	ldi	r24, 0x80	; 128
 67c:	95 e2       	ldi	r25, 0x25	; 37
 67e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <uart_init>
	sei();						//enable global interrupts
 682:	78 94       	sei

	//PIN_OUT(PINB4);				//for testing

	UDR0 = '\0';				// you need this to kick start the transmit
 684:	86 ec       	ldi	r24, 0xC6	; 198
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	fc 01       	movw	r30, r24
 68a:	10 82       	st	Z, r1
		

		
		
		//PIN_TOGGLE(PINB4);
		V_out = ADC_reading * CONVERT_CONSTANT;		//convert from 10 bit ADC to a 5-30 Voltage 
 68c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ADC_reading>
 690:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ADC_reading+0x1>
 694:	cc 01       	movw	r24, r24
 696:	a0 e0       	ldi	r26, 0x00	; 0
 698:	b0 e0       	ldi	r27, 0x00	; 0
 69a:	bc 01       	movw	r22, r24
 69c:	cd 01       	movw	r24, r26
 69e:	0e 94 47 04 	call	0x88e	; 0x88e <__floatunsisf>
 6a2:	dc 01       	movw	r26, r24
 6a4:	cb 01       	movw	r24, r22
 6a6:	2e ee       	ldi	r18, 0xEE	; 238
 6a8:	3c e7       	ldi	r19, 0x7C	; 124
 6aa:	47 e5       	ldi	r20, 0x57	; 87
 6ac:	50 e4       	ldi	r21, 0x40	; 64
 6ae:	bc 01       	movw	r22, r24
 6b0:	cd 01       	movw	r24, r26
 6b2:	0e 94 ad 04 	call	0x95a	; 0x95a <__mulsf3>
 6b6:	dc 01       	movw	r26, r24
 6b8:	cb 01       	movw	r24, r22
 6ba:	bc 01       	movw	r22, r24
 6bc:	cd 01       	movw	r24, r26
 6be:	0e 94 18 04 	call	0x830	; 0x830 <__fixunssfsi>
 6c2:	dc 01       	movw	r26, r24
 6c4:	cb 01       	movw	r24, r22
 6c6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <V_out+0x1>
 6ca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <V_out>
		pi_controller(V_out, V_ref);				//Do the PI calculations and map to output PWM
 6ce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6d2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <V_out>
 6da:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <V_out+0x1>
 6de:	b9 01       	movw	r22, r18
 6e0:	0e 94 8d 00 	call	0x11a	; 0x11a <pi_controller>
		
		
		
		if (slowdown_counter > 9999){
 6e4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <slowdown_counter>
 6e8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <slowdown_counter+0x1>
 6ec:	80 31       	cpi	r24, 0x10	; 16
 6ee:	97 42       	sbci	r25, 0x27	; 39
 6f0:	50 f0       	brcs	.+20     	; 0x706 <main+0xa0>
			load_voltage(V_out);		//load the V_out value in the transmit buffer
 6f2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <V_out>
 6f6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <V_out+0x1>
 6fa:	0e 94 c5 01 	call	0x38a	; 0x38a <load_voltage>
			slowdown_counter = 0;		
 6fe:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <slowdown_counter+0x1>
 702:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <slowdown_counter>
			
		}
		
		slowdown_counter++;
 706:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <slowdown_counter>
 70a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <slowdown_counter+0x1>
 70e:	01 96       	adiw	r24, 0x01	; 1
 710:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <slowdown_counter+0x1>
 714:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <slowdown_counter>
		
		
		V_ref = receive(V_ref);			//Read user input for reference voltage feed in current V_ref for when the input is invalid
 718:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 71c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 720:	0e 94 70 02 	call	0x4e0	; 0x4e0 <receive>
 724:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 728:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		

	}
 72c:	af cf       	rjmp	.-162    	; 0x68c <main+0x26>

0000072e <timer0_init>:
#include "timer0.h"

#define PI_LIMIT 6784		//not used here but for information


void timer0_init(void){
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 2<<COM0B0 | 3<<WGM00;		//Fast PWM mode & Clear on Compare Match with OCR0B 
 736:	84 e4       	ldi	r24, 0x44	; 68
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	23 e2       	ldi	r18, 0x23	; 35
 73c:	fc 01       	movw	r30, r24
 73e:	20 83       	st	Z, r18
	TCCR0B = 1<<WGM02 | 1<<CS00;		//Pre-scaler 1
 740:	85 e4       	ldi	r24, 0x45	; 69
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	29 e0       	ldi	r18, 0x09	; 9
 746:	fc 01       	movw	r30, r24
 748:	20 83       	st	Z, r18
	OCR0A = 159;						//Loading OCR0A with 159 to setup a 100kHz PWM
 74a:	87 e4       	ldi	r24, 0x47	; 71
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	2f e9       	ldi	r18, 0x9F	; 159
 750:	fc 01       	movw	r30, r24
 752:	20 83       	st	Z, r18
	DDRD = 1<<PIND5;					//PD5 setup as an output pin of the PWM
 754:	8a e2       	ldi	r24, 0x2A	; 42
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	20 e2       	ldi	r18, 0x20	; 32
 75a:	fc 01       	movw	r30, r24
 75c:	20 83       	st	Z, r18

}
 75e:	00 00       	nop
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	08 95       	ret

00000766 <timer1_init>:



void timer1_init(void){
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	cd b7       	in	r28, 0x3d	; 61
 76c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = (1<<WGM11) | (1<<WGM10);					//Fast PWM mode 
 76e:	80 e8       	ldi	r24, 0x80	; 128
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	23 e0       	ldi	r18, 0x03	; 3
 774:	fc 01       	movw	r30, r24
 776:	20 83       	st	Z, r18
	TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11);       //Pre-scaler 8
 778:	81 e8       	ldi	r24, 0x81	; 129
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	2a e1       	ldi	r18, 0x1A	; 26
 77e:	fc 01       	movw	r30, r24
 780:	20 83       	st	Z, r18
	OCR1A = 149;										//Setup a 0.0745mS PWM, will not go below this. minimum acquistion + conversion time??
 782:	88 e8       	ldi	r24, 0x88	; 136
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	25 e9       	ldi	r18, 0x95	; 149
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	fc 01       	movw	r30, r24
 78c:	31 83       	std	Z+1, r19	; 0x01
 78e:	20 83       	st	Z, r18
	
}
 790:	00 00       	nop
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <set_timer0_compare>:



void set_timer0_compare(int16_t unmapped){
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	00 d0       	rcall	.+0      	; 0x79e <set_timer0_compare+0x6>
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
 7a2:	9a 83       	std	Y+2, r25	; 0x02
 7a4:	89 83       	std	Y+1, r24	; 0x01
	OCR0B = ((unmapped * 3)>>8) + 80;   //converting PI_out results to a value between 0 and 159 to map to the output PWM
 7a6:	48 e4       	ldi	r20, 0x48	; 72
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	29 81       	ldd	r18, Y+1	; 0x01
 7ac:	3a 81       	ldd	r19, Y+2	; 0x02
 7ae:	c9 01       	movw	r24, r18
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	82 0f       	add	r24, r18
 7b6:	93 1f       	adc	r25, r19
 7b8:	89 2f       	mov	r24, r25
 7ba:	99 0f       	add	r25, r25
 7bc:	99 0b       	sbc	r25, r25
 7be:	80 5b       	subi	r24, 0xB0	; 176
 7c0:	fa 01       	movw	r30, r20
 7c2:	80 83       	st	Z, r24
	
}
 7c4:	00 00       	nop
 7c6:	0f 90       	pop	r0
 7c8:	0f 90       	pop	r0
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	08 95       	ret

000007d0 <uart_init>:
#include <avr/io.h>

#include "uart.h"


void uart_init(uint16_t BAUD_RATE) {
 7d0:	0f 93       	push	r16
 7d2:	1f 93       	push	r17
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
 7d8:	00 d0       	rcall	.+0      	; 0x7da <uart_init+0xa>
 7da:	cd b7       	in	r28, 0x3d	; 61
 7dc:	de b7       	in	r29, 0x3e	; 62
 7de:	9a 83       	std	Y+2, r25	; 0x02
 7e0:	89 83       	std	Y+1, r24	; 0x01
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<TXEN0) | (1<<RXEN0);	//Enable Transmit/Receive and Transmit/Receive Interrupts
 7e2:	81 ec       	ldi	r24, 0xC1	; 193
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	28 ed       	ldi	r18, 0xD8	; 216
 7e8:	fc 01       	movw	r30, r24
 7ea:	20 83       	st	Z, r18
	UCSR0C =  (1<<UCSZ01) | (1<<UCSZ00);							//8N1 no parity, we are only using 7 data bits
 7ec:	82 ec       	ldi	r24, 0xC2	; 194
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	26 e0       	ldi	r18, 0x06	; 6
 7f2:	fc 01       	movw	r30, r24
 7f4:	20 83       	st	Z, r18
	UBRR0 = (1000000 /BAUD_RATE) - 1;								//Set UBRR0 with baud rate 
 7f6:	04 ec       	ldi	r16, 0xC4	; 196
 7f8:	10 e0       	ldi	r17, 0x00	; 0
 7fa:	89 81       	ldd	r24, Y+1	; 0x01
 7fc:	9a 81       	ldd	r25, Y+2	; 0x02
 7fe:	9c 01       	movw	r18, r24
 800:	40 e0       	ldi	r20, 0x00	; 0
 802:	50 e0       	ldi	r21, 0x00	; 0
 804:	80 e4       	ldi	r24, 0x40	; 64
 806:	92 e4       	ldi	r25, 0x42	; 66
 808:	af e0       	ldi	r26, 0x0F	; 15
 80a:	b0 e0       	ldi	r27, 0x00	; 0
 80c:	bc 01       	movw	r22, r24
 80e:	cd 01       	movw	r24, r26
 810:	0e 94 42 05 	call	0xa84	; 0xa84 <__divmodsi4>
 814:	da 01       	movw	r26, r20
 816:	c9 01       	movw	r24, r18
 818:	01 97       	sbiw	r24, 0x01	; 1
 81a:	f8 01       	movw	r30, r16
 81c:	91 83       	std	Z+1, r25	; 0x01
 81e:	80 83       	st	Z, r24

 820:	00 00       	nop
 822:	0f 90       	pop	r0
 824:	0f 90       	pop	r0
 826:	df 91       	pop	r29
 828:	cf 91       	pop	r28
 82a:	1f 91       	pop	r17
 82c:	0f 91       	pop	r16
 82e:	08 95       	ret

00000830 <__fixunssfsi>:
 830:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_splitA>
 834:	88 f0       	brcs	.+34     	; 0x858 <__fixunssfsi+0x28>
 836:	9f 57       	subi	r25, 0x7F	; 127
 838:	98 f0       	brcs	.+38     	; 0x860 <__fixunssfsi+0x30>
 83a:	b9 2f       	mov	r27, r25
 83c:	99 27       	eor	r25, r25
 83e:	b7 51       	subi	r27, 0x17	; 23
 840:	b0 f0       	brcs	.+44     	; 0x86e <__fixunssfsi+0x3e>
 842:	e1 f0       	breq	.+56     	; 0x87c <__fixunssfsi+0x4c>
 844:	66 0f       	add	r22, r22
 846:	77 1f       	adc	r23, r23
 848:	88 1f       	adc	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	1a f0       	brmi	.+6      	; 0x854 <__fixunssfsi+0x24>
 84e:	ba 95       	dec	r27
 850:	c9 f7       	brne	.-14     	; 0x844 <__fixunssfsi+0x14>
 852:	14 c0       	rjmp	.+40     	; 0x87c <__fixunssfsi+0x4c>
 854:	b1 30       	cpi	r27, 0x01	; 1
 856:	91 f0       	breq	.+36     	; 0x87c <__fixunssfsi+0x4c>
 858:	0e 94 a6 04 	call	0x94c	; 0x94c <__fp_zero>
 85c:	b1 e0       	ldi	r27, 0x01	; 1
 85e:	08 95       	ret
 860:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__fp_zero>
 864:	67 2f       	mov	r22, r23
 866:	78 2f       	mov	r23, r24
 868:	88 27       	eor	r24, r24
 86a:	b8 5f       	subi	r27, 0xF8	; 248
 86c:	39 f0       	breq	.+14     	; 0x87c <__fixunssfsi+0x4c>
 86e:	b9 3f       	cpi	r27, 0xF9	; 249
 870:	cc f3       	brlt	.-14     	; 0x864 <__fixunssfsi+0x34>
 872:	86 95       	lsr	r24
 874:	77 95       	ror	r23
 876:	67 95       	ror	r22
 878:	b3 95       	inc	r27
 87a:	d9 f7       	brne	.-10     	; 0x872 <__fixunssfsi+0x42>
 87c:	3e f4       	brtc	.+14     	; 0x88c <__fixunssfsi+0x5c>
 87e:	90 95       	com	r25
 880:	80 95       	com	r24
 882:	70 95       	com	r23
 884:	61 95       	neg	r22
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	8f 4f       	sbci	r24, 0xFF	; 255
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	08 95       	ret

0000088e <__floatunsisf>:
 88e:	e8 94       	clt
 890:	09 c0       	rjmp	.+18     	; 0x8a4 <__floatsisf+0x12>

00000892 <__floatsisf>:
 892:	97 fb       	bst	r25, 7
 894:	3e f4       	brtc	.+14     	; 0x8a4 <__floatsisf+0x12>
 896:	90 95       	com	r25
 898:	80 95       	com	r24
 89a:	70 95       	com	r23
 89c:	61 95       	neg	r22
 89e:	7f 4f       	sbci	r23, 0xFF	; 255
 8a0:	8f 4f       	sbci	r24, 0xFF	; 255
 8a2:	9f 4f       	sbci	r25, 0xFF	; 255
 8a4:	99 23       	and	r25, r25
 8a6:	a9 f0       	breq	.+42     	; 0x8d2 <__floatsisf+0x40>
 8a8:	f9 2f       	mov	r31, r25
 8aa:	96 e9       	ldi	r25, 0x96	; 150
 8ac:	bb 27       	eor	r27, r27
 8ae:	93 95       	inc	r25
 8b0:	f6 95       	lsr	r31
 8b2:	87 95       	ror	r24
 8b4:	77 95       	ror	r23
 8b6:	67 95       	ror	r22
 8b8:	b7 95       	ror	r27
 8ba:	f1 11       	cpse	r31, r1
 8bc:	f8 cf       	rjmp	.-16     	; 0x8ae <__floatsisf+0x1c>
 8be:	fa f4       	brpl	.+62     	; 0x8fe <__floatsisf+0x6c>
 8c0:	bb 0f       	add	r27, r27
 8c2:	11 f4       	brne	.+4      	; 0x8c8 <__floatsisf+0x36>
 8c4:	60 ff       	sbrs	r22, 0
 8c6:	1b c0       	rjmp	.+54     	; 0x8fe <__floatsisf+0x6c>
 8c8:	6f 5f       	subi	r22, 0xFF	; 255
 8ca:	7f 4f       	sbci	r23, 0xFF	; 255
 8cc:	8f 4f       	sbci	r24, 0xFF	; 255
 8ce:	9f 4f       	sbci	r25, 0xFF	; 255
 8d0:	16 c0       	rjmp	.+44     	; 0x8fe <__floatsisf+0x6c>
 8d2:	88 23       	and	r24, r24
 8d4:	11 f0       	breq	.+4      	; 0x8da <__floatsisf+0x48>
 8d6:	96 e9       	ldi	r25, 0x96	; 150
 8d8:	11 c0       	rjmp	.+34     	; 0x8fc <__floatsisf+0x6a>
 8da:	77 23       	and	r23, r23
 8dc:	21 f0       	breq	.+8      	; 0x8e6 <__floatsisf+0x54>
 8de:	9e e8       	ldi	r25, 0x8E	; 142
 8e0:	87 2f       	mov	r24, r23
 8e2:	76 2f       	mov	r23, r22
 8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <__floatsisf+0x5e>
 8e6:	66 23       	and	r22, r22
 8e8:	71 f0       	breq	.+28     	; 0x906 <__stack+0x7>
 8ea:	96 e8       	ldi	r25, 0x86	; 134
 8ec:	86 2f       	mov	r24, r22
 8ee:	70 e0       	ldi	r23, 0x00	; 0
 8f0:	60 e0       	ldi	r22, 0x00	; 0
 8f2:	2a f0       	brmi	.+10     	; 0x8fe <__floatsisf+0x6c>
 8f4:	9a 95       	dec	r25
 8f6:	66 0f       	add	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	88 1f       	adc	r24, r24
 8fc:	da f7       	brpl	.-10     	; 0x8f4 <__floatsisf+0x62>
 8fe:	88 0f       	add	r24, r24
 900:	96 95       	lsr	r25
 902:	87 95       	ror	r24
 904:	97 f9       	bld	r25, 7
 906:	08 95       	ret

00000908 <__fp_split3>:
 908:	57 fd       	sbrc	r21, 7
 90a:	90 58       	subi	r25, 0x80	; 128
 90c:	44 0f       	add	r20, r20
 90e:	55 1f       	adc	r21, r21
 910:	59 f0       	breq	.+22     	; 0x928 <__fp_splitA+0x10>
 912:	5f 3f       	cpi	r21, 0xFF	; 255
 914:	71 f0       	breq	.+28     	; 0x932 <__fp_splitA+0x1a>
 916:	47 95       	ror	r20

00000918 <__fp_splitA>:
 918:	88 0f       	add	r24, r24
 91a:	97 fb       	bst	r25, 7
 91c:	99 1f       	adc	r25, r25
 91e:	61 f0       	breq	.+24     	; 0x938 <__fp_splitA+0x20>
 920:	9f 3f       	cpi	r25, 0xFF	; 255
 922:	79 f0       	breq	.+30     	; 0x942 <__fp_splitA+0x2a>
 924:	87 95       	ror	r24
 926:	08 95       	ret
 928:	12 16       	cp	r1, r18
 92a:	13 06       	cpc	r1, r19
 92c:	14 06       	cpc	r1, r20
 92e:	55 1f       	adc	r21, r21
 930:	f2 cf       	rjmp	.-28     	; 0x916 <__fp_split3+0xe>
 932:	46 95       	lsr	r20
 934:	f1 df       	rcall	.-30     	; 0x918 <__fp_splitA>
 936:	08 c0       	rjmp	.+16     	; 0x948 <__fp_splitA+0x30>
 938:	16 16       	cp	r1, r22
 93a:	17 06       	cpc	r1, r23
 93c:	18 06       	cpc	r1, r24
 93e:	99 1f       	adc	r25, r25
 940:	f1 cf       	rjmp	.-30     	; 0x924 <__fp_splitA+0xc>
 942:	86 95       	lsr	r24
 944:	71 05       	cpc	r23, r1
 946:	61 05       	cpc	r22, r1
 948:	08 94       	sec
 94a:	08 95       	ret

0000094c <__fp_zero>:
 94c:	e8 94       	clt

0000094e <__fp_szero>:
 94e:	bb 27       	eor	r27, r27
 950:	66 27       	eor	r22, r22
 952:	77 27       	eor	r23, r23
 954:	cb 01       	movw	r24, r22
 956:	97 f9       	bld	r25, 7
 958:	08 95       	ret

0000095a <__mulsf3>:
 95a:	0e 94 c0 04 	call	0x980	; 0x980 <__mulsf3x>
 95e:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__fp_round>
 962:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_pscA>
 966:	38 f0       	brcs	.+14     	; 0x976 <__mulsf3+0x1c>
 968:	0e 94 2a 05 	call	0xa54	; 0xa54 <__fp_pscB>
 96c:	20 f0       	brcs	.+8      	; 0x976 <__mulsf3+0x1c>
 96e:	95 23       	and	r25, r21
 970:	11 f0       	breq	.+4      	; 0x976 <__mulsf3+0x1c>
 972:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__fp_inf>
 976:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__fp_nan>
 97a:	11 24       	eor	r1, r1
 97c:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_szero>

00000980 <__mulsf3x>:
 980:	0e 94 84 04 	call	0x908	; 0x908 <__fp_split3>
 984:	70 f3       	brcs	.-36     	; 0x962 <__mulsf3+0x8>

00000986 <__mulsf3_pse>:
 986:	95 9f       	mul	r25, r21
 988:	c1 f3       	breq	.-16     	; 0x97a <__mulsf3+0x20>
 98a:	95 0f       	add	r25, r21
 98c:	50 e0       	ldi	r21, 0x00	; 0
 98e:	55 1f       	adc	r21, r21
 990:	62 9f       	mul	r22, r18
 992:	f0 01       	movw	r30, r0
 994:	72 9f       	mul	r23, r18
 996:	bb 27       	eor	r27, r27
 998:	f0 0d       	add	r31, r0
 99a:	b1 1d       	adc	r27, r1
 99c:	63 9f       	mul	r22, r19
 99e:	aa 27       	eor	r26, r26
 9a0:	f0 0d       	add	r31, r0
 9a2:	b1 1d       	adc	r27, r1
 9a4:	aa 1f       	adc	r26, r26
 9a6:	64 9f       	mul	r22, r20
 9a8:	66 27       	eor	r22, r22
 9aa:	b0 0d       	add	r27, r0
 9ac:	a1 1d       	adc	r26, r1
 9ae:	66 1f       	adc	r22, r22
 9b0:	82 9f       	mul	r24, r18
 9b2:	22 27       	eor	r18, r18
 9b4:	b0 0d       	add	r27, r0
 9b6:	a1 1d       	adc	r26, r1
 9b8:	62 1f       	adc	r22, r18
 9ba:	73 9f       	mul	r23, r19
 9bc:	b0 0d       	add	r27, r0
 9be:	a1 1d       	adc	r26, r1
 9c0:	62 1f       	adc	r22, r18
 9c2:	83 9f       	mul	r24, r19
 9c4:	a0 0d       	add	r26, r0
 9c6:	61 1d       	adc	r22, r1
 9c8:	22 1f       	adc	r18, r18
 9ca:	74 9f       	mul	r23, r20
 9cc:	33 27       	eor	r19, r19
 9ce:	a0 0d       	add	r26, r0
 9d0:	61 1d       	adc	r22, r1
 9d2:	23 1f       	adc	r18, r19
 9d4:	84 9f       	mul	r24, r20
 9d6:	60 0d       	add	r22, r0
 9d8:	21 1d       	adc	r18, r1
 9da:	82 2f       	mov	r24, r18
 9dc:	76 2f       	mov	r23, r22
 9de:	6a 2f       	mov	r22, r26
 9e0:	11 24       	eor	r1, r1
 9e2:	9f 57       	subi	r25, 0x7F	; 127
 9e4:	50 40       	sbci	r21, 0x00	; 0
 9e6:	9a f0       	brmi	.+38     	; 0xa0e <__mulsf3_pse+0x88>
 9e8:	f1 f0       	breq	.+60     	; 0xa26 <__mulsf3_pse+0xa0>
 9ea:	88 23       	and	r24, r24
 9ec:	4a f0       	brmi	.+18     	; 0xa00 <__mulsf3_pse+0x7a>
 9ee:	ee 0f       	add	r30, r30
 9f0:	ff 1f       	adc	r31, r31
 9f2:	bb 1f       	adc	r27, r27
 9f4:	66 1f       	adc	r22, r22
 9f6:	77 1f       	adc	r23, r23
 9f8:	88 1f       	adc	r24, r24
 9fa:	91 50       	subi	r25, 0x01	; 1
 9fc:	50 40       	sbci	r21, 0x00	; 0
 9fe:	a9 f7       	brne	.-22     	; 0x9ea <__mulsf3_pse+0x64>
 a00:	9e 3f       	cpi	r25, 0xFE	; 254
 a02:	51 05       	cpc	r21, r1
 a04:	80 f0       	brcs	.+32     	; 0xa26 <__mulsf3_pse+0xa0>
 a06:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__fp_inf>
 a0a:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_szero>
 a0e:	5f 3f       	cpi	r21, 0xFF	; 255
 a10:	e4 f3       	brlt	.-8      	; 0xa0a <__mulsf3_pse+0x84>
 a12:	98 3e       	cpi	r25, 0xE8	; 232
 a14:	d4 f3       	brlt	.-12     	; 0xa0a <__mulsf3_pse+0x84>
 a16:	86 95       	lsr	r24
 a18:	77 95       	ror	r23
 a1a:	67 95       	ror	r22
 a1c:	b7 95       	ror	r27
 a1e:	f7 95       	ror	r31
 a20:	e7 95       	ror	r30
 a22:	9f 5f       	subi	r25, 0xFF	; 255
 a24:	c1 f7       	brne	.-16     	; 0xa16 <__mulsf3_pse+0x90>
 a26:	fe 2b       	or	r31, r30
 a28:	88 0f       	add	r24, r24
 a2a:	91 1d       	adc	r25, r1
 a2c:	96 95       	lsr	r25
 a2e:	87 95       	ror	r24
 a30:	97 f9       	bld	r25, 7
 a32:	08 95       	ret

00000a34 <__fp_inf>:
 a34:	97 f9       	bld	r25, 7
 a36:	9f 67       	ori	r25, 0x7F	; 127
 a38:	80 e8       	ldi	r24, 0x80	; 128
 a3a:	70 e0       	ldi	r23, 0x00	; 0
 a3c:	60 e0       	ldi	r22, 0x00	; 0
 a3e:	08 95       	ret

00000a40 <__fp_nan>:
 a40:	9f ef       	ldi	r25, 0xFF	; 255
 a42:	80 ec       	ldi	r24, 0xC0	; 192
 a44:	08 95       	ret

00000a46 <__fp_pscA>:
 a46:	00 24       	eor	r0, r0
 a48:	0a 94       	dec	r0
 a4a:	16 16       	cp	r1, r22
 a4c:	17 06       	cpc	r1, r23
 a4e:	18 06       	cpc	r1, r24
 a50:	09 06       	cpc	r0, r25
 a52:	08 95       	ret

00000a54 <__fp_pscB>:
 a54:	00 24       	eor	r0, r0
 a56:	0a 94       	dec	r0
 a58:	12 16       	cp	r1, r18
 a5a:	13 06       	cpc	r1, r19
 a5c:	14 06       	cpc	r1, r20
 a5e:	05 06       	cpc	r0, r21
 a60:	08 95       	ret

00000a62 <__fp_round>:
 a62:	09 2e       	mov	r0, r25
 a64:	03 94       	inc	r0
 a66:	00 0c       	add	r0, r0
 a68:	11 f4       	brne	.+4      	; 0xa6e <__fp_round+0xc>
 a6a:	88 23       	and	r24, r24
 a6c:	52 f0       	brmi	.+20     	; 0xa82 <__fp_round+0x20>
 a6e:	bb 0f       	add	r27, r27
 a70:	40 f4       	brcc	.+16     	; 0xa82 <__fp_round+0x20>
 a72:	bf 2b       	or	r27, r31
 a74:	11 f4       	brne	.+4      	; 0xa7a <__fp_round+0x18>
 a76:	60 ff       	sbrs	r22, 0
 a78:	04 c0       	rjmp	.+8      	; 0xa82 <__fp_round+0x20>
 a7a:	6f 5f       	subi	r22, 0xFF	; 255
 a7c:	7f 4f       	sbci	r23, 0xFF	; 255
 a7e:	8f 4f       	sbci	r24, 0xFF	; 255
 a80:	9f 4f       	sbci	r25, 0xFF	; 255
 a82:	08 95       	ret

00000a84 <__divmodsi4>:
 a84:	05 2e       	mov	r0, r21
 a86:	97 fb       	bst	r25, 7
 a88:	1e f4       	brtc	.+6      	; 0xa90 <__divmodsi4+0xc>
 a8a:	00 94       	com	r0
 a8c:	0e 94 59 05 	call	0xab2	; 0xab2 <__negsi2>
 a90:	57 fd       	sbrc	r21, 7
 a92:	07 d0       	rcall	.+14     	; 0xaa2 <__divmodsi4_neg2>
 a94:	0e 94 70 05 	call	0xae0	; 0xae0 <__udivmodsi4>
 a98:	07 fc       	sbrc	r0, 7
 a9a:	03 d0       	rcall	.+6      	; 0xaa2 <__divmodsi4_neg2>
 a9c:	4e f4       	brtc	.+18     	; 0xab0 <__divmodsi4_exit>
 a9e:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__negsi2>

00000aa2 <__divmodsi4_neg2>:
 aa2:	50 95       	com	r21
 aa4:	40 95       	com	r20
 aa6:	30 95       	com	r19
 aa8:	21 95       	neg	r18
 aaa:	3f 4f       	sbci	r19, 0xFF	; 255
 aac:	4f 4f       	sbci	r20, 0xFF	; 255
 aae:	5f 4f       	sbci	r21, 0xFF	; 255

00000ab0 <__divmodsi4_exit>:
 ab0:	08 95       	ret

00000ab2 <__negsi2>:
 ab2:	90 95       	com	r25
 ab4:	80 95       	com	r24
 ab6:	70 95       	com	r23
 ab8:	61 95       	neg	r22
 aba:	7f 4f       	sbci	r23, 0xFF	; 255
 abc:	8f 4f       	sbci	r24, 0xFF	; 255
 abe:	9f 4f       	sbci	r25, 0xFF	; 255
 ac0:	08 95       	ret

00000ac2 <__umulhisi3>:
 ac2:	a2 9f       	mul	r26, r18
 ac4:	b0 01       	movw	r22, r0
 ac6:	b3 9f       	mul	r27, r19
 ac8:	c0 01       	movw	r24, r0
 aca:	a3 9f       	mul	r26, r19
 acc:	70 0d       	add	r23, r0
 ace:	81 1d       	adc	r24, r1
 ad0:	11 24       	eor	r1, r1
 ad2:	91 1d       	adc	r25, r1
 ad4:	b2 9f       	mul	r27, r18
 ad6:	70 0d       	add	r23, r0
 ad8:	81 1d       	adc	r24, r1
 ada:	11 24       	eor	r1, r1
 adc:	91 1d       	adc	r25, r1
 ade:	08 95       	ret

00000ae0 <__udivmodsi4>:
 ae0:	a1 e2       	ldi	r26, 0x21	; 33
 ae2:	1a 2e       	mov	r1, r26
 ae4:	aa 1b       	sub	r26, r26
 ae6:	bb 1b       	sub	r27, r27
 ae8:	fd 01       	movw	r30, r26
 aea:	0d c0       	rjmp	.+26     	; 0xb06 <__udivmodsi4_ep>

00000aec <__udivmodsi4_loop>:
 aec:	aa 1f       	adc	r26, r26
 aee:	bb 1f       	adc	r27, r27
 af0:	ee 1f       	adc	r30, r30
 af2:	ff 1f       	adc	r31, r31
 af4:	a2 17       	cp	r26, r18
 af6:	b3 07       	cpc	r27, r19
 af8:	e4 07       	cpc	r30, r20
 afa:	f5 07       	cpc	r31, r21
 afc:	20 f0       	brcs	.+8      	; 0xb06 <__udivmodsi4_ep>
 afe:	a2 1b       	sub	r26, r18
 b00:	b3 0b       	sbc	r27, r19
 b02:	e4 0b       	sbc	r30, r20
 b04:	f5 0b       	sbc	r31, r21

00000b06 <__udivmodsi4_ep>:
 b06:	66 1f       	adc	r22, r22
 b08:	77 1f       	adc	r23, r23
 b0a:	88 1f       	adc	r24, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	1a 94       	dec	r1
 b10:	69 f7       	brne	.-38     	; 0xaec <__udivmodsi4_loop>
 b12:	60 95       	com	r22
 b14:	70 95       	com	r23
 b16:	80 95       	com	r24
 b18:	90 95       	com	r25
 b1a:	9b 01       	movw	r18, r22
 b1c:	ac 01       	movw	r20, r24
 b1e:	bd 01       	movw	r22, r26
 b20:	cf 01       	movw	r24, r30
 b22:	08 95       	ret

00000b24 <_exit>:
 b24:	f8 94       	cli

00000b26 <__stop_program>:
 b26:	ff cf       	rjmp	.-2      	; 0xb26 <__stop_program>
