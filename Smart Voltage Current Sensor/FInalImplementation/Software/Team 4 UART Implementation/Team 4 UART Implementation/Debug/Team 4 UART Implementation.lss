
Team 4 UART Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000090c  00000980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000090c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000009b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a25  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f8  00000000  00000000  000014b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005be  00000000  00000000  00001cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048d  00000000  00000000  000023a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000259  00000000  00000000  00002831  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002a8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 84 04 	jmp	0x908	; 0x908 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
uint8_t convert_ascii(uint8_t data);
void transmitFullNumber(uint8_t numberArray[5]);


int main(void)
{	
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	a4 97       	sbiw	r28, 0x24	; 36
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61

	usart_init(UBRRVALUE); //Initialize UART
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 ca 02 	call	0x594	; 0x594 <usart_init>
	while (1)
	{
		uint8_t digits[5]; //Initialize array
		uint8_t acsiiArray[5];
		
		uint16_t peakVoltage = (PEAKVOLTAGE * 100); //Multiply number into an integer
  b2:	8a e7       	ldi	r24, 0x7A	; 122
  b4:	98 e0       	ldi	r25, 0x08	; 8
  b6:	98 87       	std	Y+8, r25	; 0x08
  b8:	8f 83       	std	Y+7, r24	; 0x07
		extract_digits(digits, peakVoltage); //Call extract function to get an array of digits
  ba:	2f 81       	ldd	r18, Y+7	; 0x07
  bc:	38 85       	ldd	r19, Y+8	; 0x08
  be:	ce 01       	movw	r24, r28
  c0:	4b 96       	adiw	r24, 0x1b	; 27
  c2:	b9 01       	movw	r22, r18
  c4:	0e 94 92 01 	call	0x324	; 0x324 <extract_digits>
		for (int i = 0; i < 5; i++){ //For every number in the array
  c8:	1a 82       	std	Y+2, r1	; 0x02
  ca:	19 82       	std	Y+1, r1	; 0x01
  cc:	1a c0       	rjmp	.+52     	; 0x102 <main+0x6c>
			acsiiArray[i] = convert_ascii(digits[i]);//Convert to ascii
  ce:	9e 01       	movw	r18, r28
  d0:	25 5e       	subi	r18, 0xE5	; 229
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	9a 81       	ldd	r25, Y+2	; 0x02
  d8:	82 0f       	add	r24, r18
  da:	93 1f       	adc	r25, r19
  dc:	fc 01       	movw	r30, r24
  de:	80 81       	ld	r24, Z
  e0:	0e 94 86 01 	call	0x30c	; 0x30c <convert_ascii>
  e4:	48 2f       	mov	r20, r24
  e6:	9e 01       	movw	r18, r28
  e8:	20 5e       	subi	r18, 0xE0	; 224
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	9a 81       	ldd	r25, Y+2	; 0x02
  f0:	82 0f       	add	r24, r18
  f2:	93 1f       	adc	r25, r19
  f4:	fc 01       	movw	r30, r24
  f6:	40 83       	st	Z, r20
		uint8_t digits[5]; //Initialize array
		uint8_t acsiiArray[5];
		
		uint16_t peakVoltage = (PEAKVOLTAGE * 100); //Multiply number into an integer
		extract_digits(digits, peakVoltage); //Call extract function to get an array of digits
		for (int i = 0; i < 5; i++){ //For every number in the array
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	9a 81       	ldd	r25, Y+2	; 0x02
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	9a 81       	ldd	r25, Y+2	; 0x02
 106:	05 97       	sbiw	r24, 0x05	; 5
 108:	14 f3       	brlt	.-60     	; 0xce <main+0x38>
			acsiiArray[i] = convert_ascii(digits[i]);//Convert to ascii
		}
		 
		uart_transmit_array("Peak Voltage = "); 
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 80 02 	call	0x500	; 0x500 <uart_transmit_array>
		transmitFullNumber(acsiiArray); //Transmit the whole number
 112:	ce 01       	movw	r24, r28
 114:	80 96       	adiw	r24, 0x20	; 32
 116:	0e 94 0d 03 	call	0x61a	; 0x61a <transmitFullNumber>
		uart_transmit_array(" V");
 11a:	80 e1       	ldi	r24, 0x10	; 16
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 80 02 	call	0x500	; 0x500 <uart_transmit_array>
		//Transmit new line
		usart_transmit('\r');
 122:	8d e0       	ldi	r24, 0x0D	; 13
 124:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
		usart_transmit('\n');
 128:	8a e0       	ldi	r24, 0x0A	; 10
 12a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
		
		uint16_t RMSCurrent = (RMSCURRENT * 100); //Multiply number into an integer
 12e:	84 ed       	ldi	r24, 0xD4	; 212
 130:	90 e3       	ldi	r25, 0x30	; 48
 132:	9a 87       	std	Y+10, r25	; 0x0a
 134:	89 87       	std	Y+9, r24	; 0x09
		extract_digits(digits, RMSCurrent); //Call extract function to get an array of digits
 136:	29 85       	ldd	r18, Y+9	; 0x09
 138:	3a 85       	ldd	r19, Y+10	; 0x0a
 13a:	ce 01       	movw	r24, r28
 13c:	4b 96       	adiw	r24, 0x1b	; 27
 13e:	b9 01       	movw	r22, r18
 140:	0e 94 92 01 	call	0x324	; 0x324 <extract_digits>
		for (int i = 0; i < 5; i++){ //For every number in the array
 144:	1c 82       	std	Y+4, r1	; 0x04
 146:	1b 82       	std	Y+3, r1	; 0x03
 148:	1a c0       	rjmp	.+52     	; 0x17e <main+0xe8>
			acsiiArray[i] = convert_ascii(digits[i]);//Convert to ascii
 14a:	9e 01       	movw	r18, r28
 14c:	25 5e       	subi	r18, 0xE5	; 229
 14e:	3f 4f       	sbci	r19, 0xFF	; 255
 150:	8b 81       	ldd	r24, Y+3	; 0x03
 152:	9c 81       	ldd	r25, Y+4	; 0x04
 154:	82 0f       	add	r24, r18
 156:	93 1f       	adc	r25, r19
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	0e 94 86 01 	call	0x30c	; 0x30c <convert_ascii>
 160:	48 2f       	mov	r20, r24
 162:	9e 01       	movw	r18, r28
 164:	20 5e       	subi	r18, 0xE0	; 224
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	8b 81       	ldd	r24, Y+3	; 0x03
 16a:	9c 81       	ldd	r25, Y+4	; 0x04
 16c:	82 0f       	add	r24, r18
 16e:	93 1f       	adc	r25, r19
 170:	fc 01       	movw	r30, r24
 172:	40 83       	st	Z, r20
		usart_transmit('\r');
		usart_transmit('\n');
		
		uint16_t RMSCurrent = (RMSCURRENT * 100); //Multiply number into an integer
		extract_digits(digits, RMSCurrent); //Call extract function to get an array of digits
		for (int i = 0; i < 5; i++){ //For every number in the array
 174:	8b 81       	ldd	r24, Y+3	; 0x03
 176:	9c 81       	ldd	r25, Y+4	; 0x04
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	9c 83       	std	Y+4, r25	; 0x04
 17c:	8b 83       	std	Y+3, r24	; 0x03
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	9c 81       	ldd	r25, Y+4	; 0x04
 182:	05 97       	sbiw	r24, 0x05	; 5
 184:	14 f3       	brlt	.-60     	; 0x14a <main+0xb4>
			acsiiArray[i] = convert_ascii(digits[i]);//Convert to ascii
		}
		uart_transmit_array("RMS Current = ");
 186:	83 e1       	ldi	r24, 0x13	; 19
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 80 02 	call	0x500	; 0x500 <uart_transmit_array>
		transmitFullNumber(acsiiArray);	//Transmit the whole number
 18e:	ce 01       	movw	r24, r28
 190:	80 96       	adiw	r24, 0x20	; 32
 192:	0e 94 0d 03 	call	0x61a	; 0x61a <transmitFullNumber>
		uart_transmit_array(" A");
 196:	82 e2       	ldi	r24, 0x22	; 34
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 80 02 	call	0x500	; 0x500 <uart_transmit_array>
		
		//Transmit new line
		usart_transmit('\r');
 19e:	8d e0       	ldi	r24, 0x0D	; 13
 1a0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
		usart_transmit('\n');
 1a4:	8a e0       	ldi	r24, 0x0A	; 10
 1a6:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
		
		uint16_t power = (POWER * 100); //Multiply number into an integer
 1aa:	80 ea       	ldi	r24, 0xA0	; 160
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	9c 87       	std	Y+12, r25	; 0x0c
 1b0:	8b 87       	std	Y+11, r24	; 0x0b
		extract_digits(digits, power); //Call extract function to get an array of digits
 1b2:	2b 85       	ldd	r18, Y+11	; 0x0b
 1b4:	3c 85       	ldd	r19, Y+12	; 0x0c
 1b6:	ce 01       	movw	r24, r28
 1b8:	4b 96       	adiw	r24, 0x1b	; 27
 1ba:	b9 01       	movw	r22, r18
 1bc:	0e 94 92 01 	call	0x324	; 0x324 <extract_digits>
		for (int i = 0; i < 5; i++){ //For every number in the array
 1c0:	1e 82       	std	Y+6, r1	; 0x06
 1c2:	1d 82       	std	Y+5, r1	; 0x05
 1c4:	1a c0       	rjmp	.+52     	; 0x1fa <main+0x164>
			acsiiArray[i] = convert_ascii(digits[i]);//Convert to ascii
 1c6:	9e 01       	movw	r18, r28
 1c8:	25 5e       	subi	r18, 0xE5	; 229
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	8d 81       	ldd	r24, Y+5	; 0x05
 1ce:	9e 81       	ldd	r25, Y+6	; 0x06
 1d0:	82 0f       	add	r24, r18
 1d2:	93 1f       	adc	r25, r19
 1d4:	fc 01       	movw	r30, r24
 1d6:	80 81       	ld	r24, Z
 1d8:	0e 94 86 01 	call	0x30c	; 0x30c <convert_ascii>
 1dc:	48 2f       	mov	r20, r24
 1de:	9e 01       	movw	r18, r28
 1e0:	20 5e       	subi	r18, 0xE0	; 224
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	8d 81       	ldd	r24, Y+5	; 0x05
 1e6:	9e 81       	ldd	r25, Y+6	; 0x06
 1e8:	82 0f       	add	r24, r18
 1ea:	93 1f       	adc	r25, r19
 1ec:	fc 01       	movw	r30, r24
 1ee:	40 83       	st	Z, r20
		usart_transmit('\r');
		usart_transmit('\n');
		
		uint16_t power = (POWER * 100); //Multiply number into an integer
		extract_digits(digits, power); //Call extract function to get an array of digits
		for (int i = 0; i < 5; i++){ //For every number in the array
 1f0:	8d 81       	ldd	r24, Y+5	; 0x05
 1f2:	9e 81       	ldd	r25, Y+6	; 0x06
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	9e 83       	std	Y+6, r25	; 0x06
 1f8:	8d 83       	std	Y+5, r24	; 0x05
 1fa:	8d 81       	ldd	r24, Y+5	; 0x05
 1fc:	9e 81       	ldd	r25, Y+6	; 0x06
 1fe:	05 97       	sbiw	r24, 0x05	; 5
 200:	14 f3       	brlt	.-60     	; 0x1c6 <main+0x130>
			acsiiArray[i] = convert_ascii(digits[i]);//Convert to ascii
		}
		uart_transmit_array("Power = ");
 202:	85 e2       	ldi	r24, 0x25	; 37
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 80 02 	call	0x500	; 0x500 <uart_transmit_array>
		transmitFullNumber(acsiiArray); //Transmit the whole number
 20a:	ce 01       	movw	r24, r28
 20c:	80 96       	adiw	r24, 0x20	; 32
 20e:	0e 94 0d 03 	call	0x61a	; 0x61a <transmitFullNumber>
		uart_transmit_array(" W"); 
 212:	8e e2       	ldi	r24, 0x2E	; 46
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 80 02 	call	0x500	; 0x500 <uart_transmit_array>
		//Transmit new line
		usart_transmit('\r');
 21a:	8d e0       	ldi	r24, 0x0D	; 13
 21c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
		usart_transmit('\n');
 220:	8a e0       	ldi	r24, 0x0A	; 10
 222:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	aa e7       	ldi	r26, 0x7A	; 122
 22c:	b4 e4       	ldi	r27, 0x44	; 68
 22e:	8d 87       	std	Y+13, r24	; 0x0d
 230:	9e 87       	std	Y+14, r25	; 0x0e
 232:	af 87       	std	Y+15, r26	; 0x0f
 234:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	4a ef       	ldi	r20, 0xFA	; 250
 23c:	53 e4       	ldi	r21, 0x43	; 67
 23e:	6d 85       	ldd	r22, Y+13	; 0x0d
 240:	7e 85       	ldd	r23, Y+14	; 0x0e
 242:	8f 85       	ldd	r24, Y+15	; 0x0f
 244:	98 89       	ldd	r25, Y+16	; 0x10
 246:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__mulsf3>
 24a:	dc 01       	movw	r26, r24
 24c:	cb 01       	movw	r24, r22
 24e:	89 8b       	std	Y+17, r24	; 0x11
 250:	9a 8b       	std	Y+18, r25	; 0x12
 252:	ab 8b       	std	Y+19, r26	; 0x13
 254:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e8       	ldi	r20, 0x80	; 128
 25c:	5f e3       	ldi	r21, 0x3F	; 63
 25e:	69 89       	ldd	r22, Y+17	; 0x11
 260:	7a 89       	ldd	r23, Y+18	; 0x12
 262:	8b 89       	ldd	r24, Y+19	; 0x13
 264:	9c 89       	ldd	r25, Y+20	; 0x14
 266:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__cmpsf2>
 26a:	88 23       	and	r24, r24
 26c:	2c f4       	brge	.+10     	; 0x278 <main+0x1e2>
		__ticks = 1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	9e 8b       	std	Y+22, r25	; 0x16
 274:	8d 8b       	std	Y+21, r24	; 0x15
 276:	3f c0       	rjmp	.+126    	; 0x2f6 <main+0x260>
	else if (__tmp > 65535)
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	3f ef       	ldi	r19, 0xFF	; 255
 27c:	4f e7       	ldi	r20, 0x7F	; 127
 27e:	57 e4       	ldi	r21, 0x47	; 71
 280:	69 89       	ldd	r22, Y+17	; 0x11
 282:	7a 89       	ldd	r23, Y+18	; 0x12
 284:	8b 89       	ldd	r24, Y+19	; 0x13
 286:	9c 89       	ldd	r25, Y+20	; 0x14
 288:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__gesf2>
 28c:	18 16       	cp	r1, r24
 28e:	4c f5       	brge	.+82     	; 0x2e2 <main+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	40 e2       	ldi	r20, 0x20	; 32
 296:	51 e4       	ldi	r21, 0x41	; 65
 298:	6d 85       	ldd	r22, Y+13	; 0x0d
 29a:	7e 85       	ldd	r23, Y+14	; 0x0e
 29c:	8f 85       	ldd	r24, Y+15	; 0x0f
 29e:	98 89       	ldd	r25, Y+16	; 0x10
 2a0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__mulsf3>
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	bc 01       	movw	r22, r24
 2aa:	cd 01       	movw	r24, r26
 2ac:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fixunssfsi>
 2b0:	dc 01       	movw	r26, r24
 2b2:	cb 01       	movw	r24, r22
 2b4:	9e 8b       	std	Y+22, r25	; 0x16
 2b6:	8d 8b       	std	Y+21, r24	; 0x15
 2b8:	0f c0       	rjmp	.+30     	; 0x2d8 <main+0x242>
 2ba:	82 e3       	ldi	r24, 0x32	; 50
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	98 8f       	std	Y+24, r25	; 0x18
 2c0:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2c2:	8f 89       	ldd	r24, Y+23	; 0x17
 2c4:	98 8d       	ldd	r25, Y+24	; 0x18
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <main+0x230>
 2ca:	98 8f       	std	Y+24, r25	; 0x18
 2cc:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ce:	8d 89       	ldd	r24, Y+21	; 0x15
 2d0:	9e 89       	ldd	r25, Y+22	; 0x16
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	9e 8b       	std	Y+22, r25	; 0x16
 2d6:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d8:	8d 89       	ldd	r24, Y+21	; 0x15
 2da:	9e 89       	ldd	r25, Y+22	; 0x16
 2dc:	89 2b       	or	r24, r25
 2de:	69 f7       	brne	.-38     	; 0x2ba <main+0x224>
 2e0:	14 c0       	rjmp	.+40     	; 0x30a <main+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2e2:	69 89       	ldd	r22, Y+17	; 0x11
 2e4:	7a 89       	ldd	r23, Y+18	; 0x12
 2e6:	8b 89       	ldd	r24, Y+19	; 0x13
 2e8:	9c 89       	ldd	r25, Y+20	; 0x14
 2ea:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fixunssfsi>
 2ee:	dc 01       	movw	r26, r24
 2f0:	cb 01       	movw	r24, r22
 2f2:	9e 8b       	std	Y+22, r25	; 0x16
 2f4:	8d 8b       	std	Y+21, r24	; 0x15
 2f6:	8d 89       	ldd	r24, Y+21	; 0x15
 2f8:	9e 89       	ldd	r25, Y+22	; 0x16
 2fa:	9a 8f       	std	Y+26, r25	; 0x1a
 2fc:	89 8f       	std	Y+25, r24	; 0x19
 2fe:	89 8d       	ldd	r24, Y+25	; 0x19
 300:	9a 8d       	ldd	r25, Y+26	; 0x1a
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <main+0x26c>
 306:	9a 8f       	std	Y+26, r25	; 0x1a
 308:	89 8f       	std	Y+25, r24	; 0x19
		
		_delay_ms(TIME_DELAY); //Delay for one second
		
		}
 30a:	d3 ce       	rjmp	.-602    	; 0xb2 <main+0x1c>

0000030c <convert_ascii>:

}


uint8_t convert_ascii(uint8_t data){
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	1f 92       	push	r1
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	89 83       	std	Y+1, r24	; 0x01
	return (data + 48); // Convert number to acsii decimal representation
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	80 5d       	subi	r24, 0xD0	; 208
}
 31c:	0f 90       	pop	r0
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <extract_digits>:

void extract_digits(uint8_t digits[5], uint16_t data){
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	00 d0       	rcall	.+0      	; 0x32a <extract_digits+0x6>
 32a:	00 d0       	rcall	.+0      	; 0x32c <extract_digits+0x8>
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
 330:	9a 83       	std	Y+2, r25	; 0x02
 332:	89 83       	std	Y+1, r24	; 0x01
 334:	7c 83       	std	Y+4, r23	; 0x04
 336:	6b 83       	std	Y+3, r22	; 0x03
	
	digits[0] = data / 10000; //Get 1st digit
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	9c 81       	ldd	r25, Y+4	; 0x04
 33c:	92 95       	swap	r25
 33e:	82 95       	swap	r24
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	89 27       	eor	r24, r25
 344:	9f 70       	andi	r25, 0x0F	; 15
 346:	89 27       	eor	r24, r25
 348:	9c 01       	movw	r18, r24
 34a:	a7 e4       	ldi	r26, 0x47	; 71
 34c:	b3 e0       	ldi	r27, 0x03	; 3
 34e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__umulhisi3>
 352:	96 95       	lsr	r25
 354:	87 95       	ror	r24
 356:	96 95       	lsr	r25
 358:	87 95       	ror	r24
 35a:	96 95       	lsr	r25
 35c:	87 95       	ror	r24
 35e:	28 2f       	mov	r18, r24
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	9a 81       	ldd	r25, Y+2	; 0x02
 364:	fc 01       	movw	r30, r24
 366:	20 83       	st	Z, r18
	data = data % 10000; //Take only the lower 4 digits
 368:	4b 81       	ldd	r20, Y+3	; 0x03
 36a:	5c 81       	ldd	r21, Y+4	; 0x04
 36c:	ca 01       	movw	r24, r20
 36e:	92 95       	swap	r25
 370:	82 95       	swap	r24
 372:	8f 70       	andi	r24, 0x0F	; 15
 374:	89 27       	eor	r24, r25
 376:	9f 70       	andi	r25, 0x0F	; 15
 378:	89 27       	eor	r24, r25
 37a:	9c 01       	movw	r18, r24
 37c:	a7 e4       	ldi	r26, 0x47	; 71
 37e:	b3 e0       	ldi	r27, 0x03	; 3
 380:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__umulhisi3>
 384:	bc 01       	movw	r22, r24
 386:	76 95       	lsr	r23
 388:	67 95       	ror	r22
 38a:	76 95       	lsr	r23
 38c:	67 95       	ror	r22
 38e:	76 95       	lsr	r23
 390:	67 95       	ror	r22
 392:	20 e1       	ldi	r18, 0x10	; 16
 394:	37 e2       	ldi	r19, 0x27	; 39
 396:	62 9f       	mul	r22, r18
 398:	c0 01       	movw	r24, r0
 39a:	63 9f       	mul	r22, r19
 39c:	90 0d       	add	r25, r0
 39e:	72 9f       	mul	r23, r18
 3a0:	90 0d       	add	r25, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	9a 01       	movw	r18, r20
 3a6:	28 1b       	sub	r18, r24
 3a8:	39 0b       	sbc	r19, r25
 3aa:	c9 01       	movw	r24, r18
 3ac:	9c 83       	std	Y+4, r25	; 0x04
 3ae:	8b 83       	std	Y+3, r24	; 0x03
	digits[1] = data / 1000; //Get 2nd digit
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	9a 81       	ldd	r25, Y+2	; 0x02
 3b4:	ac 01       	movw	r20, r24
 3b6:	4f 5f       	subi	r20, 0xFF	; 255
 3b8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	9c 81       	ldd	r25, Y+4	; 0x04
 3be:	96 95       	lsr	r25
 3c0:	87 95       	ror	r24
 3c2:	96 95       	lsr	r25
 3c4:	87 95       	ror	r24
 3c6:	96 95       	lsr	r25
 3c8:	87 95       	ror	r24
 3ca:	9c 01       	movw	r18, r24
 3cc:	a5 ec       	ldi	r26, 0xC5	; 197
 3ce:	b0 e2       	ldi	r27, 0x20	; 32
 3d0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__umulhisi3>
 3d4:	92 95       	swap	r25
 3d6:	82 95       	swap	r24
 3d8:	8f 70       	andi	r24, 0x0F	; 15
 3da:	89 27       	eor	r24, r25
 3dc:	9f 70       	andi	r25, 0x0F	; 15
 3de:	89 27       	eor	r24, r25
 3e0:	fa 01       	movw	r30, r20
 3e2:	80 83       	st	Z, r24
	data = data % 1000; //Take only the lower 3 digits
 3e4:	4b 81       	ldd	r20, Y+3	; 0x03
 3e6:	5c 81       	ldd	r21, Y+4	; 0x04
 3e8:	ca 01       	movw	r24, r20
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	9c 01       	movw	r18, r24
 3f8:	a5 ec       	ldi	r26, 0xC5	; 197
 3fa:	b0 e2       	ldi	r27, 0x20	; 32
 3fc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__umulhisi3>
 400:	bc 01       	movw	r22, r24
 402:	72 95       	swap	r23
 404:	62 95       	swap	r22
 406:	6f 70       	andi	r22, 0x0F	; 15
 408:	67 27       	eor	r22, r23
 40a:	7f 70       	andi	r23, 0x0F	; 15
 40c:	67 27       	eor	r22, r23
 40e:	28 ee       	ldi	r18, 0xE8	; 232
 410:	33 e0       	ldi	r19, 0x03	; 3
 412:	62 9f       	mul	r22, r18
 414:	c0 01       	movw	r24, r0
 416:	63 9f       	mul	r22, r19
 418:	90 0d       	add	r25, r0
 41a:	72 9f       	mul	r23, r18
 41c:	90 0d       	add	r25, r0
 41e:	11 24       	eor	r1, r1
 420:	9a 01       	movw	r18, r20
 422:	28 1b       	sub	r18, r24
 424:	39 0b       	sbc	r19, r25
 426:	c9 01       	movw	r24, r18
 428:	9c 83       	std	Y+4, r25	; 0x04
 42a:	8b 83       	std	Y+3, r24	; 0x03
	digits[2] = data / 100; //Get 3rd digit
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	9a 81       	ldd	r25, Y+2	; 0x02
 430:	ac 01       	movw	r20, r24
 432:	4e 5f       	subi	r20, 0xFE	; 254
 434:	5f 4f       	sbci	r21, 0xFF	; 255
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	9c 81       	ldd	r25, Y+4	; 0x04
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	96 95       	lsr	r25
 440:	87 95       	ror	r24
 442:	9c 01       	movw	r18, r24
 444:	ab e7       	ldi	r26, 0x7B	; 123
 446:	b4 e1       	ldi	r27, 0x14	; 20
 448:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__umulhisi3>
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	fa 01       	movw	r30, r20
 452:	80 83       	st	Z, r24
	data = data % 100; //Take only the lower 2 digits
 454:	4b 81       	ldd	r20, Y+3	; 0x03
 456:	5c 81       	ldd	r21, Y+4	; 0x04
 458:	ca 01       	movw	r24, r20
 45a:	96 95       	lsr	r25
 45c:	87 95       	ror	r24
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	9c 01       	movw	r18, r24
 464:	ab e7       	ldi	r26, 0x7B	; 123
 466:	b4 e1       	ldi	r27, 0x14	; 20
 468:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__umulhisi3>
 46c:	9c 01       	movw	r18, r24
 46e:	36 95       	lsr	r19
 470:	27 95       	ror	r18
 472:	64 e6       	ldi	r22, 0x64	; 100
 474:	62 9f       	mul	r22, r18
 476:	c0 01       	movw	r24, r0
 478:	63 9f       	mul	r22, r19
 47a:	90 0d       	add	r25, r0
 47c:	11 24       	eor	r1, r1
 47e:	9a 01       	movw	r18, r20
 480:	28 1b       	sub	r18, r24
 482:	39 0b       	sbc	r19, r25
 484:	c9 01       	movw	r24, r18
 486:	9c 83       	std	Y+4, r25	; 0x04
 488:	8b 83       	std	Y+3, r24	; 0x03
	digits[3] = data / 10; //Get 4th digit
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	9a 81       	ldd	r25, Y+2	; 0x02
 48e:	ac 01       	movw	r20, r24
 490:	4d 5f       	subi	r20, 0xFD	; 253
 492:	5f 4f       	sbci	r21, 0xFF	; 255
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	9c 81       	ldd	r25, Y+4	; 0x04
 498:	9c 01       	movw	r18, r24
 49a:	ad ec       	ldi	r26, 0xCD	; 205
 49c:	bc ec       	ldi	r27, 0xCC	; 204
 49e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__umulhisi3>
 4a2:	96 95       	lsr	r25
 4a4:	87 95       	ror	r24
 4a6:	96 95       	lsr	r25
 4a8:	87 95       	ror	r24
 4aa:	96 95       	lsr	r25
 4ac:	87 95       	ror	r24
 4ae:	fa 01       	movw	r30, r20
 4b0:	80 83       	st	Z, r24
	digits[4] = data % 10; //Get 5th digit
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	9a 81       	ldd	r25, Y+2	; 0x02
 4b6:	fc 01       	movw	r30, r24
 4b8:	34 96       	adiw	r30, 0x04	; 4
 4ba:	4b 81       	ldd	r20, Y+3	; 0x03
 4bc:	5c 81       	ldd	r21, Y+4	; 0x04
 4be:	9a 01       	movw	r18, r20
 4c0:	ad ec       	ldi	r26, 0xCD	; 205
 4c2:	bc ec       	ldi	r27, 0xCC	; 204
 4c4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__umulhisi3>
 4c8:	96 95       	lsr	r25
 4ca:	87 95       	ror	r24
 4cc:	96 95       	lsr	r25
 4ce:	87 95       	ror	r24
 4d0:	96 95       	lsr	r25
 4d2:	87 95       	ror	r24
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	9c 01       	movw	r18, r24
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	22 0f       	add	r18, r18
 4e0:	33 1f       	adc	r19, r19
 4e2:	82 0f       	add	r24, r18
 4e4:	93 1f       	adc	r25, r19
 4e6:	9a 01       	movw	r18, r20
 4e8:	28 1b       	sub	r18, r24
 4ea:	39 0b       	sbc	r19, r25
 4ec:	c9 01       	movw	r24, r18
 4ee:	80 83       	st	Z, r24
	
	
	return;
 4f0:	00 00       	nop
}
 4f2:	0f 90       	pop	r0
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <uart_transmit_array>:

void uart_transmit_array(char* msg){
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	00 d0       	rcall	.+0      	; 0x50a <uart_transmit_array+0xa>
 50a:	1f 92       	push	r1
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	9b 83       	std	Y+3, r25	; 0x03
 512:	8a 83       	std	Y+2, r24	; 0x02
	//Loop through each byte in the array
	for (uint8_t i = 0; i < strlen(msg); i++){
 514:	19 82       	std	Y+1, r1	; 0x01
 516:	10 c0       	rjmp	.+32     	; 0x538 <uart_transmit_array+0x38>
		uart_transmit_byte(msg[i]);                //Transmit each byte using uart_transmit_byte(char byte)
 518:	89 81       	ldd	r24, Y+1	; 0x01
 51a:	88 2f       	mov	r24, r24
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	2a 81       	ldd	r18, Y+2	; 0x02
 520:	3b 81       	ldd	r19, Y+3	; 0x03
 522:	82 0f       	add	r24, r18
 524:	93 1f       	adc	r25, r19
 526:	fc 01       	movw	r30, r24
 528:	80 81       	ld	r24, Z
 52a:	88 2f       	mov	r24, r24
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 af 02 	call	0x55e	; 0x55e <uart_transmit_byte>
	return;
}

void uart_transmit_array(char* msg){
	//Loop through each byte in the array
	for (uint8_t i = 0; i < strlen(msg); i++){
 532:	89 81       	ldd	r24, Y+1	; 0x01
 534:	8f 5f       	subi	r24, 0xFF	; 255
 536:	89 83       	std	Y+1, r24	; 0x01
 538:	89 81       	ldd	r24, Y+1	; 0x01
 53a:	08 2f       	mov	r16, r24
 53c:	10 e0       	ldi	r17, 0x00	; 0
 53e:	8a 81       	ldd	r24, Y+2	; 0x02
 540:	9b 81       	ldd	r25, Y+3	; 0x03
 542:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <strlen>
 546:	08 17       	cp	r16, r24
 548:	19 07       	cpc	r17, r25
 54a:	30 f3       	brcs	.-52     	; 0x518 <uart_transmit_array+0x18>
		uart_transmit_byte(msg[i]);                //Transmit each byte using uart_transmit_byte(char byte)
	}
}
 54c:	00 00       	nop
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	08 95       	ret

0000055e <uart_transmit_byte>:

void uart_transmit_byte(char byte){
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	1f 92       	push	r1
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	89 83       	std	Y+1, r24	; 0x01
	while ((UCSR0A & 0b00100000) == 0){       //UDRE0 bit is checked to see if it is 0
 56a:	00 00       	nop
 56c:	80 ec       	ldi	r24, 0xC0	; 192
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	fc 01       	movw	r30, r24
 572:	80 81       	ld	r24, Z
 574:	88 2f       	mov	r24, r24
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	80 72       	andi	r24, 0x20	; 32
 57a:	99 27       	eor	r25, r25
 57c:	89 2b       	or	r24, r25
 57e:	b1 f3       	breq	.-20     	; 0x56c <uart_transmit_byte+0xe>
		;                                         //If UDRE0 bit is not 0, wait until it becomes 0
	}
	//Put the byte to be sent into the UDR0 register
	UDR0 = byte;
 580:	86 ec       	ldi	r24, 0xC6	; 198
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	29 81       	ldd	r18, Y+1	; 0x01
 586:	fc 01       	movw	r30, r24
 588:	20 83       	st	Z, r18
 58a:	00 00       	nop
 58c:	0f 90       	pop	r0
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <usart_init>:
#include "uart0.h"

#include <avr/io.h>
#include <stdint.h>

void usart_init(uint16_t ubrr){
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	00 d0       	rcall	.+0      	; 0x59a <usart_init+0x6>
 59a:	cd b7       	in	r28, 0x3d	; 61
 59c:	de b7       	in	r29, 0x3e	; 62
 59e:	9a 83       	std	Y+2, r25	; 0x02
 5a0:	89 83       	std	Y+1, r24	; 0x01
	
	UCSR0B |= (1 << TXEN0); //Turn transmit function on
 5a2:	81 ec       	ldi	r24, 0xC1	; 193
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	21 ec       	ldi	r18, 0xC1	; 193
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	f9 01       	movw	r30, r18
 5ac:	20 81       	ld	r18, Z
 5ae:	28 60       	ori	r18, 0x08	; 8
 5b0:	fc 01       	movw	r30, r24
 5b2:	20 83       	st	Z, r18
	
	UCSR0C = 0x06; // Set transmit character length
 5b4:	82 ec       	ldi	r24, 0xC2	; 194
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	26 e0       	ldi	r18, 0x06	; 6
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
	
	UBRR0H = (ubrr>>8); // Set baud rate
 5be:	85 ec       	ldi	r24, 0xC5	; 197
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	29 81       	ldd	r18, Y+1	; 0x01
 5c4:	3a 81       	ldd	r19, Y+2	; 0x02
 5c6:	23 2f       	mov	r18, r19
 5c8:	33 27       	eor	r19, r19
 5ca:	fc 01       	movw	r30, r24
 5cc:	20 83       	st	Z, r18
	UBRR0L = ubrr; // Set baud rate
 5ce:	84 ec       	ldi	r24, 0xC4	; 196
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	29 81       	ldd	r18, Y+1	; 0x01
 5d4:	fc 01       	movw	r30, r24
 5d6:	20 83       	st	Z, r18
	
	return;
 5d8:	00 00       	nop
}
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <usart_transmit>:

void usart_transmit(uint8_t data){
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	1f 92       	push	r1
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	89 83       	std	Y+1, r24	; 0x01
	
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Wait until transmit register is empty
 5f0:	00 00       	nop
 5f2:	80 ec       	ldi	r24, 0xC0	; 192
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	fc 01       	movw	r30, r24
 5f8:	80 81       	ld	r24, Z
 5fa:	88 2f       	mov	r24, r24
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	80 72       	andi	r24, 0x20	; 32
 600:	99 27       	eor	r25, r25
 602:	89 2b       	or	r24, r25
 604:	b1 f3       	breq	.-20     	; 0x5f2 <usart_transmit+0xe>
	
	UDR0 = data; // Put transmitted data into register
 606:	86 ec       	ldi	r24, 0xC6	; 198
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	29 81       	ldd	r18, Y+1	; 0x01
 60c:	fc 01       	movw	r30, r24
 60e:	20 83       	st	Z, r18
	
	return;
 610:	00 00       	nop
}
 612:	0f 90       	pop	r0
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	08 95       	ret

0000061a <transmitFullNumber>:

void transmitFullNumber(uint8_t acsiiArray[5]){
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	00 d0       	rcall	.+0      	; 0x620 <transmitFullNumber+0x6>
 620:	00 d0       	rcall	.+0      	; 0x622 <transmitFullNumber+0x8>
 622:	00 d0       	rcall	.+0      	; 0x624 <transmitFullNumber+0xa>
 624:	cd b7       	in	r28, 0x3d	; 61
 626:	de b7       	in	r29, 0x3e	; 62
 628:	9e 83       	std	Y+6, r25	; 0x06
 62a:	8d 83       	std	Y+5, r24	; 0x05
	
	for(int i = 0; i < 3; i++){ //For three integer digits
 62c:	1a 82       	std	Y+2, r1	; 0x02
 62e:	19 82       	std	Y+1, r1	; 0x01
 630:	0f c0       	rjmp	.+30     	; 0x650 <transmitFullNumber+0x36>
		usart_transmit(acsiiArray[i]); //Transmit digit
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	9a 81       	ldd	r25, Y+2	; 0x02
 636:	2d 81       	ldd	r18, Y+5	; 0x05
 638:	3e 81       	ldd	r19, Y+6	; 0x06
 63a:	82 0f       	add	r24, r18
 63c:	93 1f       	adc	r25, r19
 63e:	fc 01       	movw	r30, r24
 640:	80 81       	ld	r24, Z
 642:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
	return;
}

void transmitFullNumber(uint8_t acsiiArray[5]){
	
	for(int i = 0; i < 3; i++){ //For three integer digits
 646:	89 81       	ldd	r24, Y+1	; 0x01
 648:	9a 81       	ldd	r25, Y+2	; 0x02
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	9a 83       	std	Y+2, r25	; 0x02
 64e:	89 83       	std	Y+1, r24	; 0x01
 650:	89 81       	ldd	r24, Y+1	; 0x01
 652:	9a 81       	ldd	r25, Y+2	; 0x02
 654:	03 97       	sbiw	r24, 0x03	; 3
 656:	6c f3       	brlt	.-38     	; 0x632 <transmitFullNumber+0x18>
		usart_transmit(acsiiArray[i]); //Transmit digit
	}
	
	usart_transmit(46); //Transmit decimal point
 658:	8e e2       	ldi	r24, 0x2E	; 46
 65a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
	
	for(int i = 3; i < 5; i++){ //For two decimal places
 65e:	83 e0       	ldi	r24, 0x03	; 3
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	9c 83       	std	Y+4, r25	; 0x04
 664:	8b 83       	std	Y+3, r24	; 0x03
 666:	0f c0       	rjmp	.+30     	; 0x686 <transmitFullNumber+0x6c>
		usart_transmit(acsiiArray[i]); //Transmit digit
 668:	8b 81       	ldd	r24, Y+3	; 0x03
 66a:	9c 81       	ldd	r25, Y+4	; 0x04
 66c:	2d 81       	ldd	r18, Y+5	; 0x05
 66e:	3e 81       	ldd	r19, Y+6	; 0x06
 670:	82 0f       	add	r24, r18
 672:	93 1f       	adc	r25, r19
 674:	fc 01       	movw	r30, r24
 676:	80 81       	ld	r24, Z
 678:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_transmit>
		usart_transmit(acsiiArray[i]); //Transmit digit
	}
	
	usart_transmit(46); //Transmit decimal point
	
	for(int i = 3; i < 5; i++){ //For two decimal places
 67c:	8b 81       	ldd	r24, Y+3	; 0x03
 67e:	9c 81       	ldd	r25, Y+4	; 0x04
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	9c 83       	std	Y+4, r25	; 0x04
 684:	8b 83       	std	Y+3, r24	; 0x03
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	9c 81       	ldd	r25, Y+4	; 0x04
 68a:	05 97       	sbiw	r24, 0x05	; 5
 68c:	6c f3       	brlt	.-38     	; 0x668 <transmitFullNumber+0x4e>
		usart_transmit(acsiiArray[i]); //Transmit digit
	}

 68e:	00 00       	nop
 690:	26 96       	adiw	r28, 0x06	; 6
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	f8 94       	cli
 696:	de bf       	out	0x3e, r29	; 62
 698:	0f be       	out	0x3f, r0	; 63
 69a:	cd bf       	out	0x3d, r28	; 61
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <__cmpsf2>:
 6a2:	0e 94 85 03 	call	0x70a	; 0x70a <__fp_cmp>
 6a6:	08 f4       	brcc	.+2      	; 0x6aa <__cmpsf2+0x8>
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	08 95       	ret

000006ac <__fixunssfsi>:
 6ac:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_splitA>
 6b0:	88 f0       	brcs	.+34     	; 0x6d4 <__fixunssfsi+0x28>
 6b2:	9f 57       	subi	r25, 0x7F	; 127
 6b4:	98 f0       	brcs	.+38     	; 0x6dc <__fixunssfsi+0x30>
 6b6:	b9 2f       	mov	r27, r25
 6b8:	99 27       	eor	r25, r25
 6ba:	b7 51       	subi	r27, 0x17	; 23
 6bc:	b0 f0       	brcs	.+44     	; 0x6ea <__fixunssfsi+0x3e>
 6be:	e1 f0       	breq	.+56     	; 0x6f8 <__fixunssfsi+0x4c>
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	1a f0       	brmi	.+6      	; 0x6d0 <__fixunssfsi+0x24>
 6ca:	ba 95       	dec	r27
 6cc:	c9 f7       	brne	.-14     	; 0x6c0 <__fixunssfsi+0x14>
 6ce:	14 c0       	rjmp	.+40     	; 0x6f8 <__fixunssfsi+0x4c>
 6d0:	b1 30       	cpi	r27, 0x01	; 1
 6d2:	91 f0       	breq	.+36     	; 0x6f8 <__fixunssfsi+0x4c>
 6d4:	0e 94 cb 03 	call	0x796	; 0x796 <__fp_zero>
 6d8:	b1 e0       	ldi	r27, 0x01	; 1
 6da:	08 95       	ret
 6dc:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_zero>
 6e0:	67 2f       	mov	r22, r23
 6e2:	78 2f       	mov	r23, r24
 6e4:	88 27       	eor	r24, r24
 6e6:	b8 5f       	subi	r27, 0xF8	; 248
 6e8:	39 f0       	breq	.+14     	; 0x6f8 <__fixunssfsi+0x4c>
 6ea:	b9 3f       	cpi	r27, 0xF9	; 249
 6ec:	cc f3       	brlt	.-14     	; 0x6e0 <__fixunssfsi+0x34>
 6ee:	86 95       	lsr	r24
 6f0:	77 95       	ror	r23
 6f2:	67 95       	ror	r22
 6f4:	b3 95       	inc	r27
 6f6:	d9 f7       	brne	.-10     	; 0x6ee <__fixunssfsi+0x42>
 6f8:	3e f4       	brtc	.+14     	; 0x708 <__fixunssfsi+0x5c>
 6fa:	90 95       	com	r25
 6fc:	80 95       	com	r24
 6fe:	70 95       	com	r23
 700:	61 95       	neg	r22
 702:	7f 4f       	sbci	r23, 0xFF	; 255
 704:	8f 4f       	sbci	r24, 0xFF	; 255
 706:	9f 4f       	sbci	r25, 0xFF	; 255
 708:	08 95       	ret

0000070a <__fp_cmp>:
 70a:	99 0f       	add	r25, r25
 70c:	00 08       	sbc	r0, r0
 70e:	55 0f       	add	r21, r21
 710:	aa 0b       	sbc	r26, r26
 712:	e0 e8       	ldi	r30, 0x80	; 128
 714:	fe ef       	ldi	r31, 0xFE	; 254
 716:	16 16       	cp	r1, r22
 718:	17 06       	cpc	r1, r23
 71a:	e8 07       	cpc	r30, r24
 71c:	f9 07       	cpc	r31, r25
 71e:	c0 f0       	brcs	.+48     	; 0x750 <__fp_cmp+0x46>
 720:	12 16       	cp	r1, r18
 722:	13 06       	cpc	r1, r19
 724:	e4 07       	cpc	r30, r20
 726:	f5 07       	cpc	r31, r21
 728:	98 f0       	brcs	.+38     	; 0x750 <__fp_cmp+0x46>
 72a:	62 1b       	sub	r22, r18
 72c:	73 0b       	sbc	r23, r19
 72e:	84 0b       	sbc	r24, r20
 730:	95 0b       	sbc	r25, r21
 732:	39 f4       	brne	.+14     	; 0x742 <__fp_cmp+0x38>
 734:	0a 26       	eor	r0, r26
 736:	61 f0       	breq	.+24     	; 0x750 <__fp_cmp+0x46>
 738:	23 2b       	or	r18, r19
 73a:	24 2b       	or	r18, r20
 73c:	25 2b       	or	r18, r21
 73e:	21 f4       	brne	.+8      	; 0x748 <__fp_cmp+0x3e>
 740:	08 95       	ret
 742:	0a 26       	eor	r0, r26
 744:	09 f4       	brne	.+2      	; 0x748 <__fp_cmp+0x3e>
 746:	a1 40       	sbci	r26, 0x01	; 1
 748:	a6 95       	lsr	r26
 74a:	8f ef       	ldi	r24, 0xFF	; 255
 74c:	81 1d       	adc	r24, r1
 74e:	81 1d       	adc	r24, r1
 750:	08 95       	ret

00000752 <__fp_split3>:
 752:	57 fd       	sbrc	r21, 7
 754:	90 58       	subi	r25, 0x80	; 128
 756:	44 0f       	add	r20, r20
 758:	55 1f       	adc	r21, r21
 75a:	59 f0       	breq	.+22     	; 0x772 <__fp_splitA+0x10>
 75c:	5f 3f       	cpi	r21, 0xFF	; 255
 75e:	71 f0       	breq	.+28     	; 0x77c <__fp_splitA+0x1a>
 760:	47 95       	ror	r20

00000762 <__fp_splitA>:
 762:	88 0f       	add	r24, r24
 764:	97 fb       	bst	r25, 7
 766:	99 1f       	adc	r25, r25
 768:	61 f0       	breq	.+24     	; 0x782 <__fp_splitA+0x20>
 76a:	9f 3f       	cpi	r25, 0xFF	; 255
 76c:	79 f0       	breq	.+30     	; 0x78c <__fp_splitA+0x2a>
 76e:	87 95       	ror	r24
 770:	08 95       	ret
 772:	12 16       	cp	r1, r18
 774:	13 06       	cpc	r1, r19
 776:	14 06       	cpc	r1, r20
 778:	55 1f       	adc	r21, r21
 77a:	f2 cf       	rjmp	.-28     	; 0x760 <__fp_split3+0xe>
 77c:	46 95       	lsr	r20
 77e:	f1 df       	rcall	.-30     	; 0x762 <__fp_splitA>
 780:	08 c0       	rjmp	.+16     	; 0x792 <__fp_splitA+0x30>
 782:	16 16       	cp	r1, r22
 784:	17 06       	cpc	r1, r23
 786:	18 06       	cpc	r1, r24
 788:	99 1f       	adc	r25, r25
 78a:	f1 cf       	rjmp	.-30     	; 0x76e <__fp_splitA+0xc>
 78c:	86 95       	lsr	r24
 78e:	71 05       	cpc	r23, r1
 790:	61 05       	cpc	r22, r1
 792:	08 94       	sec
 794:	08 95       	ret

00000796 <__fp_zero>:
 796:	e8 94       	clt

00000798 <__fp_szero>:
 798:	bb 27       	eor	r27, r27
 79a:	66 27       	eor	r22, r22
 79c:	77 27       	eor	r23, r23
 79e:	cb 01       	movw	r24, r22
 7a0:	97 f9       	bld	r25, 7
 7a2:	08 95       	ret

000007a4 <__gesf2>:
 7a4:	0e 94 85 03 	call	0x70a	; 0x70a <__fp_cmp>
 7a8:	08 f4       	brcc	.+2      	; 0x7ac <__gesf2+0x8>
 7aa:	8f ef       	ldi	r24, 0xFF	; 255
 7ac:	08 95       	ret

000007ae <__mulsf3>:
 7ae:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__mulsf3x>
 7b2:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_round>
 7b6:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_pscA>
 7ba:	38 f0       	brcs	.+14     	; 0x7ca <__mulsf3+0x1c>
 7bc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_pscB>
 7c0:	20 f0       	brcs	.+8      	; 0x7ca <__mulsf3+0x1c>
 7c2:	95 23       	and	r25, r21
 7c4:	11 f0       	breq	.+4      	; 0x7ca <__mulsf3+0x1c>
 7c6:	0c 94 44 04 	jmp	0x888	; 0x888 <__fp_inf>
 7ca:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_nan>
 7ce:	11 24       	eor	r1, r1
 7d0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_szero>

000007d4 <__mulsf3x>:
 7d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_split3>
 7d8:	70 f3       	brcs	.-36     	; 0x7b6 <__mulsf3+0x8>

000007da <__mulsf3_pse>:
 7da:	95 9f       	mul	r25, r21
 7dc:	c1 f3       	breq	.-16     	; 0x7ce <__mulsf3+0x20>
 7de:	95 0f       	add	r25, r21
 7e0:	50 e0       	ldi	r21, 0x00	; 0
 7e2:	55 1f       	adc	r21, r21
 7e4:	62 9f       	mul	r22, r18
 7e6:	f0 01       	movw	r30, r0
 7e8:	72 9f       	mul	r23, r18
 7ea:	bb 27       	eor	r27, r27
 7ec:	f0 0d       	add	r31, r0
 7ee:	b1 1d       	adc	r27, r1
 7f0:	63 9f       	mul	r22, r19
 7f2:	aa 27       	eor	r26, r26
 7f4:	f0 0d       	add	r31, r0
 7f6:	b1 1d       	adc	r27, r1
 7f8:	aa 1f       	adc	r26, r26
 7fa:	64 9f       	mul	r22, r20
 7fc:	66 27       	eor	r22, r22
 7fe:	b0 0d       	add	r27, r0
 800:	a1 1d       	adc	r26, r1
 802:	66 1f       	adc	r22, r22
 804:	82 9f       	mul	r24, r18
 806:	22 27       	eor	r18, r18
 808:	b0 0d       	add	r27, r0
 80a:	a1 1d       	adc	r26, r1
 80c:	62 1f       	adc	r22, r18
 80e:	73 9f       	mul	r23, r19
 810:	b0 0d       	add	r27, r0
 812:	a1 1d       	adc	r26, r1
 814:	62 1f       	adc	r22, r18
 816:	83 9f       	mul	r24, r19
 818:	a0 0d       	add	r26, r0
 81a:	61 1d       	adc	r22, r1
 81c:	22 1f       	adc	r18, r18
 81e:	74 9f       	mul	r23, r20
 820:	33 27       	eor	r19, r19
 822:	a0 0d       	add	r26, r0
 824:	61 1d       	adc	r22, r1
 826:	23 1f       	adc	r18, r19
 828:	84 9f       	mul	r24, r20
 82a:	60 0d       	add	r22, r0
 82c:	21 1d       	adc	r18, r1
 82e:	82 2f       	mov	r24, r18
 830:	76 2f       	mov	r23, r22
 832:	6a 2f       	mov	r22, r26
 834:	11 24       	eor	r1, r1
 836:	9f 57       	subi	r25, 0x7F	; 127
 838:	50 40       	sbci	r21, 0x00	; 0
 83a:	9a f0       	brmi	.+38     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 83c:	f1 f0       	breq	.+60     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 83e:	88 23       	and	r24, r24
 840:	4a f0       	brmi	.+18     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 842:	ee 0f       	add	r30, r30
 844:	ff 1f       	adc	r31, r31
 846:	bb 1f       	adc	r27, r27
 848:	66 1f       	adc	r22, r22
 84a:	77 1f       	adc	r23, r23
 84c:	88 1f       	adc	r24, r24
 84e:	91 50       	subi	r25, 0x01	; 1
 850:	50 40       	sbci	r21, 0x00	; 0
 852:	a9 f7       	brne	.-22     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 854:	9e 3f       	cpi	r25, 0xFE	; 254
 856:	51 05       	cpc	r21, r1
 858:	80 f0       	brcs	.+32     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 85a:	0c 94 44 04 	jmp	0x888	; 0x888 <__fp_inf>
 85e:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_szero>
 862:	5f 3f       	cpi	r21, 0xFF	; 255
 864:	e4 f3       	brlt	.-8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 866:	98 3e       	cpi	r25, 0xE8	; 232
 868:	d4 f3       	brlt	.-12     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 86a:	86 95       	lsr	r24
 86c:	77 95       	ror	r23
 86e:	67 95       	ror	r22
 870:	b7 95       	ror	r27
 872:	f7 95       	ror	r31
 874:	e7 95       	ror	r30
 876:	9f 5f       	subi	r25, 0xFF	; 255
 878:	c1 f7       	brne	.-16     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 87a:	fe 2b       	or	r31, r30
 87c:	88 0f       	add	r24, r24
 87e:	91 1d       	adc	r25, r1
 880:	96 95       	lsr	r25
 882:	87 95       	ror	r24
 884:	97 f9       	bld	r25, 7
 886:	08 95       	ret

00000888 <__fp_inf>:
 888:	97 f9       	bld	r25, 7
 88a:	9f 67       	ori	r25, 0x7F	; 127
 88c:	80 e8       	ldi	r24, 0x80	; 128
 88e:	70 e0       	ldi	r23, 0x00	; 0
 890:	60 e0       	ldi	r22, 0x00	; 0
 892:	08 95       	ret

00000894 <__fp_nan>:
 894:	9f ef       	ldi	r25, 0xFF	; 255
 896:	80 ec       	ldi	r24, 0xC0	; 192
 898:	08 95       	ret

0000089a <__fp_pscA>:
 89a:	00 24       	eor	r0, r0
 89c:	0a 94       	dec	r0
 89e:	16 16       	cp	r1, r22
 8a0:	17 06       	cpc	r1, r23
 8a2:	18 06       	cpc	r1, r24
 8a4:	09 06       	cpc	r0, r25
 8a6:	08 95       	ret

000008a8 <__fp_pscB>:
 8a8:	00 24       	eor	r0, r0
 8aa:	0a 94       	dec	r0
 8ac:	12 16       	cp	r1, r18
 8ae:	13 06       	cpc	r1, r19
 8b0:	14 06       	cpc	r1, r20
 8b2:	05 06       	cpc	r0, r21
 8b4:	08 95       	ret

000008b6 <__fp_round>:
 8b6:	09 2e       	mov	r0, r25
 8b8:	03 94       	inc	r0
 8ba:	00 0c       	add	r0, r0
 8bc:	11 f4       	brne	.+4      	; 0x8c2 <__fp_round+0xc>
 8be:	88 23       	and	r24, r24
 8c0:	52 f0       	brmi	.+20     	; 0x8d6 <__fp_round+0x20>
 8c2:	bb 0f       	add	r27, r27
 8c4:	40 f4       	brcc	.+16     	; 0x8d6 <__fp_round+0x20>
 8c6:	bf 2b       	or	r27, r31
 8c8:	11 f4       	brne	.+4      	; 0x8ce <__fp_round+0x18>
 8ca:	60 ff       	sbrs	r22, 0
 8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fp_round+0x20>
 8ce:	6f 5f       	subi	r22, 0xFF	; 255
 8d0:	7f 4f       	sbci	r23, 0xFF	; 255
 8d2:	8f 4f       	sbci	r24, 0xFF	; 255
 8d4:	9f 4f       	sbci	r25, 0xFF	; 255
 8d6:	08 95       	ret

000008d8 <__umulhisi3>:
 8d8:	a2 9f       	mul	r26, r18
 8da:	b0 01       	movw	r22, r0
 8dc:	b3 9f       	mul	r27, r19
 8de:	c0 01       	movw	r24, r0
 8e0:	a3 9f       	mul	r26, r19
 8e2:	70 0d       	add	r23, r0
 8e4:	81 1d       	adc	r24, r1
 8e6:	11 24       	eor	r1, r1
 8e8:	91 1d       	adc	r25, r1
 8ea:	b2 9f       	mul	r27, r18
 8ec:	70 0d       	add	r23, r0
 8ee:	81 1d       	adc	r24, r1
 8f0:	11 24       	eor	r1, r1
 8f2:	91 1d       	adc	r25, r1
 8f4:	08 95       	ret

000008f6 <strlen>:
 8f6:	fc 01       	movw	r30, r24
 8f8:	01 90       	ld	r0, Z+
 8fa:	00 20       	and	r0, r0
 8fc:	e9 f7       	brne	.-6      	; 0x8f8 <strlen+0x2>
 8fe:	80 95       	com	r24
 900:	90 95       	com	r25
 902:	8e 0f       	add	r24, r30
 904:	9f 1f       	adc	r25, r31
 906:	08 95       	ret

00000908 <_exit>:
 908:	f8 94       	cli

0000090a <__stop_program>:
 90a:	ff cf       	rjmp	.-2      	; 0x90a <__stop_program>
